#define STEP_VARIABLES
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
#enddef

#define STEP_SOUTHEAST_ADJUSTMENT
	{VARIABLE_OP point_x add 1}
	{STEP_VARIABLES}
	{VARIABLE_OP point_x add 1}
	{VARIABLE_OP point_y add 1}
	{STEP_VARIABLES}
#enddef

#define STEP_SOUTHWEST_ADJUSTMENT
	{VARIABLE_OP point_x add -1}
	{STEP_VARIABLES}
	{VARIABLE_OP point_x add -1}
	{VARIABLE_OP point_y add 1}
	{STEP_VARIABLES}

#enddef

#define STEP_NORTHEAST_ADJUSTMENT
	{VARIABLE_OP point_x add 1}
	{VARIABLE_OP point_y add -1}
	{STEP_VARIABLES}
	{VARIABLE_OP point_x add 1}
	{STEP_VARIABLES}
#enddef

#define STEP_NORTHWEST_ADJUSTMENT
	{VARIABLE_OP point_x add -1}
	{VARIABLE_OP point_y add -1}
	{STEP_VARIABLES}
	{VARIABLE_OP point_x add -1}
	{STEP_VARIABLES}
#enddef

#define STEP DIRECTION LENGTH
	#give in length increments of 5
	#the path is double the length (a value of 5 = 10-step path)
	{REPEAT {LENGTH} (
		{STEP_{DIRECTION}_ADJUSTMENT}
	)}
#enddef

#define PLACE_DIAMOND_MASK FILE X Y
	[terrain_mask]
		x={X}
		y={Y}
		mask="{~campaigns/Wesband/masks/{FILE}.mask}"
	[/terrain_mask]
#enddef

#define WBD_GENERATE_DUNGEON
	{ON_PRESTART (

	# generate path definition
	{VARIABLE point_x 5}
	{VARIABLE point_y 5}
	{VARIABLE path_step 0}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{STEP SOUTHEAST 5}

	{RANDOM 1..3}
		{IF_VAR random not_equals 1 (
		[then]
			{VARIABLE point_x 15}
			{VARIABLE point_y 10}
			{STEP NORTHEAST 5}
		[/then]
		)}
		{IF_VAR random not_equals 2 (
		[then]
			{VARIABLE point_x 15}
			{VARIABLE point_y 10}
			{STEP SOUTHEAST 5}
		[/then]
		)}
		{IF_VAR random not_equals 3 (
		[then]
			{VARIABLE point_x 15}
			{VARIABLE point_y 10}
			{STEP SOUTHWEST 5}
			{STEP SOUTHEAST 5}
		[/then]
		)}

	{VARIABLE point_x 45}
	{VARIABLE point_y 5}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{STEP SOUTHWEST 5}

	{RANDOM 1..3}
		{IF_VAR random not_equals 1 (
		[then]
			{VARIABLE point_x 35}
			{VARIABLE point_y 10}
			{STEP NORTHWEST 5}
		[/then]
		)}
		{IF_VAR random not_equals 2 (
		[then]
			{VARIABLE point_x 35}
			{VARIABLE point_y 10}
			{STEP SOUTHWEST 5}
		[/then]
		)}
		{IF_VAR random not_equals 3 (
		[then]
			{VARIABLE point_x 35}
			{VARIABLE point_y 10}
			{STEP SOUTHEAST 5}
			{STEP SOUTHWEST 5}
		[/then]
		)}

	{VARIABLE point_x 5}
	{VARIABLE point_y 45}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{STEP NORTHEAST 5}

	{RANDOM 1..3}
		{IF_VAR random not_equals 1 (
		[then]
			{VARIABLE point_x 15}
			{VARIABLE point_y 40}
			{STEP NORTHWEST 5}
			{STEP NORTHEAST 5}
		[/then]
		)}
		{IF_VAR random not_equals 2 (
		[then]
			{VARIABLE point_x 15}
			{VARIABLE point_y 40}
			{STEP NORTHEAST 5}
		[/then]
		)}
		{IF_VAR random not_equals 3 (
		[then]
			{VARIABLE point_x 15}
			{VARIABLE point_y 40}
			{STEP SOUTHEAST 5}
		[/then]
		)}

	{VARIABLE point_x 45}
	{VARIABLE point_y 45}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{STEP NORTHWEST 5}

	{RANDOM 1..3}
		{IF_VAR random not_equals 1 (
		[then]
			{VARIABLE point_x 35}
			{VARIABLE point_y 40}
			{STEP NORTHEAST 5}
			{STEP NORTHWEST 5}
		[/then]
		)}
		{IF_VAR random not_equals 2 (
		[then]
			{VARIABLE point_x 35}
			{VARIABLE point_y 40}
			{STEP SOUTHWEST 5}
		[/then]
		)}
		{IF_VAR random not_equals 3 (
		[then]
			{VARIABLE point_x 35}
			{VARIABLE point_y 40}
			{STEP NORTHWEST 5}
		[/then]
		)}

	{VARIABLE point_x 25}
	{VARIABLE point_y 35}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{RANDOM 1..2}
		{IF_VAR random equals 1 (
		[then]
			{STEP NORTHEAST 5}
		[/then]
		[else]
			{STEP SOUTHEAST 5}
		[/else]
		)}

	{VARIABLE point_x 45}
	{VARIABLE point_y 25}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{RANDOM 1..2}
		{IF_VAR random equals 1 (
		[then]
			{STEP NORTHWEST 5}
		[/then]
		[else]
			{STEP SOUTHWEST 5}
		[/else]
		)}

	{VARIABLE point_x 25}
	{VARIABLE point_y 15}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{RANDOM 1..2}
		{IF_VAR random equals 1 (
		[then]
			{STEP SOUTHEAST 5}
		[/then]
		[else]
			{STEP SOUTHWEST 5}
		[/else]
		)}


	{VARIABLE point_x 25}
	{VARIABLE point_y 35}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{RANDOM 1..2}
		{IF_VAR random equals 1 (
		[then]
			{STEP NORTHWEST 5}
		[/then]
		[else]
			{STEP NORTHEAST 5}
		[/else]
		)}

	{VARIABLE point_x 5}
	{VARIABLE point_y 25}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{RANDOM 1..2}
		{IF_VAR random equals 1 (
		[then]
			{STEP NORTHEAST 5}
		[/then]
		[else]
			{STEP SOUTHEAST 5}
		[/else]
		)}

	{VARIABLE point_x 25}
	{VARIABLE point_y 25}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{STEP NORTHWEST 5}

	{VARIABLE point_x 25}
	{VARIABLE point_y 25}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{STEP NORTHEAST 5}

	{VARIABLE point_x 25}
	{VARIABLE point_y 25}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{STEP SOUTHWEST 5}

	{VARIABLE point_x 25}
	{VARIABLE point_y 25}
	{VARIABLE_OP path_step add 1}
	{VARIABLE path[$path_step].x $point_x}
	{VARIABLE path[$path_step].y $point_y}
	{STEP SOUTHEAST 5}

	# fill in passageways with snow as passageway marker
	{FOREACH path i}
		{MODIFY_TERRAIN Aa $path[$i].x $path[$i].y}
		#want passageways to be thicker
		{VARIABLE is_x_even $path[$i].x}
		{VARIABLE_OP is_x_even modulo 2}
		{MODIFY_TERRAIN Aa $path[$i] "$($path[$i].y-1)"}
		{MODIFY_TERRAIN Aa $path[$i] "$($path[$i].y+1)"}
		{MODIFY_TERRAIN Aa "$($path[$i].x-1)" $path[$i].y}
		{MODIFY_TERRAIN Aa "$($path[$i].x+1)" $path[$i].y}
		[if]
			[variable]
				name=is_x_even
				equals=0
			[/variable]
			[then]
				{MODIFY_TERRAIN Aa "$($path[$i].x-1)" "$($path[$i].y+1)"}
				{MODIFY_TERRAIN Aa "$($path[$i].x+1)" "$($path[$i].y+1)"}
			[/then]
			[else]
				{MODIFY_TERRAIN Aa "$($path[$i].x-1)" "$($path[$i].y-1)"}
				{MODIFY_TERRAIN Aa "$($path[$i].x+1)" "$($path[$i].y-1)"}
			[/else]
		[/if]
	{NEXT i}

	# put in rooms
	{VARIABLE diag_mask[0].x 1}
	{VARIABLE diag_mask[0].y 1}
	{VARIABLE diag_mask[1].x 1}
	{VARIABLE diag_mask[1].y 20}
	{VARIABLE diag_mask[2].x 1}
	{VARIABLE diag_mask[2].y 40}
	{VARIABLE diag_mask[3].x 10}
	{VARIABLE diag_mask[3].y 5}
	{VARIABLE diag_mask[4].x 10}
	{VARIABLE diag_mask[4].y 15}
	{VARIABLE diag_mask[5].x 10}
	{VARIABLE diag_mask[5].y 25}
	{VARIABLE diag_mask[6].x 10}
	{VARIABLE diag_mask[6].y 35}
	{VARIABLE diag_mask[7].x 20}
	{VARIABLE diag_mask[7].y 10}
	{VARIABLE diag_mask[8].x 20}
	{VARIABLE diag_mask[8].y 20}
	{VARIABLE diag_mask[9].x 20}
	{VARIABLE diag_mask[9].y 30}
	{VARIABLE diag_mask[10].x 30}
	{VARIABLE diag_mask[10].y 5}
	{VARIABLE diag_mask[11].x 30}
	{VARIABLE diag_mask[11].y 15}
	{VARIABLE diag_mask[12].x 30}
	{VARIABLE diag_mask[12].y 25}
	{VARIABLE diag_mask[13].x 30}
	{VARIABLE diag_mask[13].y 35}
	{VARIABLE diag_mask[14].x 40}
	{VARIABLE diag_mask[14].y 1}
	{VARIABLE diag_mask[15].x 40}
	{VARIABLE diag_mask[15].y 20}
	{VARIABLE diag_mask[16].x 40}
	{VARIABLE diag_mask[16].y 40}

	{FOREACH diag_mask i}
		{RANDOM 1..20}
		{IF_VAR random equals 1 (
		[then]
			{PLACE_DIAMOND_MASK diamond_large_upper $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 2 (
		[then]
			{PLACE_DIAMOND_MASK diamond_large_lower $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 3 (
		[then]
			{PLACE_DIAMOND_MASK diamond_long_upper $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 4 (
		[then]
			{PLACE_DIAMOND_MASK diamond_long_lower $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 5 (
		[then]
			{PLACE_DIAMOND_MASK diamond_long2_upper $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 6 (
		[then]
			{PLACE_DIAMOND_MASK diamond_long2_lower $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 7 (
		[then]
			{PLACE_DIAMOND_MASK diamond_large_center $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 8 (
		[then]
			{PLACE_DIAMOND_MASK diamond_small_center $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 9 (
		[then]
			{PLACE_DIAMOND_MASK diamond_large2_center $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 10 (
		[then]
			{PLACE_DIAMOND_MASK diamond_columns $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 11 (
		[then]
			{PLACE_DIAMOND_MASK diamond_s $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 12 (
		[then]
			{PLACE_DIAMOND_MASK diamond_irreg $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 13 (
		[then]
			{PLACE_DIAMOND_MASK diamond_irreg2 $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 14 (
		[then]
			{PLACE_DIAMOND_MASK diamond_irreg3 $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 15 (
		[then]
			{PLACE_DIAMOND_MASK diamond_columns2 $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 16 (
		[then]
			{PLACE_DIAMOND_MASK diamond_large_pool $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 17 (
		[then]
			{PLACE_DIAMOND_MASK diamond_star_pool $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 18 (
		[then]
			{PLACE_DIAMOND_MASK diamond_hex_pool $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 19 (
		[then]
			{PLACE_DIAMOND_MASK diamond_hex $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
		{IF_VAR random equals 20 (
		[then]
			{PLACE_DIAMOND_MASK diamond_star $diag_mask[$i].x $diag_mask[$i].y}
		[/then]
		)}
	{NEXT i}
	)}

#enddef

#define WBD_CROSS_MASK FILE TERRAIN
	[terrain_mask]
		x=1
		y=1
		mask="{~campaigns/Wesband/masks/{FILE}.mask}"
		[rule]
			old=Xu
			new=Ai
			terrain={TERRAIN}
		[/rule]
		[rule]
			old=Re
			new=Ai
			terrain=Re
		[/rule]
		[rule]
			old=Aa
			new=Ai
			terrain=Aa
		[/rule]
	[/terrain_mask]
#enddef

#define RANDOMIZE_TERRAIN LOCATIONS RANDOM_TERRAINS
    [store_locations]
        {LOCATIONS}
        variable=temp_rand_terrain
    [/store_locations]
   
    {FOREACH temp_rand_terrain i}
        {RANDOM {RANDOM_TERRAINS}}
       
        [terrain]
            x,y=$temp_rand_terrain[$i].x,$temp_rand_terrain[$i].y
            terrain=$random
        [/terrain]
    {NEXT i}

    {CLEAR_VARIABLE temp_rand_terrain}
#enddef

#define WBD_APPLY_TERRAIN_ADJUSTMENTS
	## make passageway terrain match chamber terrain and give
	## a chance to adjust basic dirt terrain. This should be
	## the last generator macro (objects, exits, and mobs place
	## only on dirt, so they have to run before this).
	{ON_PRESTART (

		# Determine pool flavor
		{RANDOM 1..6}
		{IF_VAR random less_than 3 (
		[then]
			{VARIABLE pool_flavor Ww}
		[/then]
		)}
		{IF_VAR random equals 3 (
		[then]
			{VARIABLE pool_flavor Ss}
		[/then]
		)}
		{IF_VAR random greater_than 3 (
		[then]
			{VARIABLE pool_flavor Ql}
		[/then]
		)}
		{IF_VAR random greater_than 5 (
		[then]
			{VARIABLE pool_flavor Qlf}
		[/then]
		)}


		# Determine cross-map flow flavor
		{RANDOM 1..4}
		{IF_VAR random equals 1 (
		[then]
			{VARIABLE flow_flavor Qxu}
		[/then]
		[else]
			{VARIABLE flow_flavor $pool_flavor}
		[/else]
		)}

		# Chance to add a cross-map flow
		{RANDOM 1..5}
		{IF_VAR random less_than 3 (
			[then]
				{RANDOM 1..10}
				{IF_VAR random equals 1 (
					[then]
						{WBD_CROSS_MASK cross_1 $flow_flavor}
					[/then]
				)}
				{IF_VAR random equals 2 (
					[then]
						{WBD_CROSS_MASK cross_2 $flow_flavor}
					[/then]
				)}
				{IF_VAR random equals 3 (
					[then]
						{WBD_CROSS_MASK cross_3 $flow_flavor}
					[/then]
				)}
				{IF_VAR random equals 4 (
					[then]
						{WBD_CROSS_MASK cross_4 $flow_flavor}
					[/then]
				)}
				{IF_VAR random equals 5 (
					[then]
						{WBD_CROSS_MASK cross_5 $flow_flavor}
					[/then]
				)}
				{IF_VAR random equals 6 (
					[then]
						{WBD_CROSS_MASK cross_6 $flow_flavor}
					[/then]
				)}
				{IF_VAR random equals 7 (
					[then]
						{WBD_CROSS_MASK cross_7 $flow_flavor}
					[/then]
				)}
				{IF_VAR random equals 8 (
					[then]
						{WBD_CROSS_MASK cross_8 $flow_flavor}
					[/then]
				)}
				{IF_VAR random equals 9 (
					[then]
						{WBD_CROSS_MASK cross_9 $flow_flavor}
					[/then]
				)}
				{IF_VAR random equals 10 (
					[then]
						{WBD_CROSS_MASK cross_10 $flow_flavor}
					[/then]
				)}
			[/then]
		)}

		# Possibility to use stone wall instead of cave wall
		{RANDOM 1..3}
		{IF_VAR random equals 1 (
		[then]
			[store_locations]
				x=1-50
				y=1-50
				terrain=Xu
				variable=wall_finalize
			[/store_locations]
			{FOREACH wall_finalize i}
				{MODIFY_TERRAIN Xos $wall_finalize[$i].x $wall_finalize[$i].y}
			{NEXT i}
			{CLEAR_VARIABLE wall_finalize}
		[/then]
		)}
		
		# Add a chance of floor conversion (dwarf castle, encampment, cave, or water)
		[store_locations]
			x=1-50
			y=1-50
			terrain=Re,Aa
			variable=terrain_finalize
		[/store_locations]
		{VARIABLE terrain_variation Rd}
	#boosted terrain variations more than dov had	
			{IF_VAR terr_rand greater_than 4 (
				[then]
					{VARIABLE terrain_variation Re}
				[/then]
			)}
			{IF_VAR terr_rand greater_than 8 (
				[then]
					{VARIABLE terrain_variation Ur}
				[/then]
			)}
			{IF_VAR terr_rand greater_than 14 (
				[then]
					{VARIABLE terrain_variation Wwf}
				[/then]
			)}
			{IF_VAR terr_rand greater_than 16 (
				[then]
					{VARIABLE terrain_variation Rr}
				[/then]
			)}
			{IF_VAR terr_rand greater_than 18 (
				[then]
					{VARIABLE terrain_variation Cux}
				[/then]
			)}

	
		# Set passageway terrain to match chamber terrain and apply new variation
		{FOREACH terrain_finalize i}
			{MODIFY_TERRAIN $terrain_variation $terrain_finalize[$i].x $terrain_finalize[$i].y}
		{NEXT i}
		{CLEAR_VARIABLE terrain_finalize}
		
		#add random terrain based on terrain type
		{IF_VAR terr_rand less_than 5 (
			[then]
				{RANDOMIZE_TERRAIN (
					terrain=Rd
				) "Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd^Wel,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Rd^Dr,Uh,Uh,Uh,Uh,Uh,Uh,Uu,Uu,Uu,Uu,Uu,Uu,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf"}
			[/then]
		)}
		{IF_VAR terr_rand greater_than 4 (
			[then]
				{RANDOMIZE_TERRAIN (
					terrain=Re
				) "Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re,Re^Wel,Re^Dr,Re^Dr,Re^Dr,Re^Dr,Re^Dr,Re^Dr,Re^Dr,Re^Dr,Re^Dr,Re^Dr,Uh,Uh,Uh,Uh,Uh,Uu,Uu,Uu,Uu,Uu,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf"}
			[/then]
		)}
		{IF_VAR terr_rand greater_than 8 (
			[then]
				{RANDOMIZE_TERRAIN (
					terrain=Ur
				) "Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur,Ur^Wel,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf,Uu,Uu,Uh,Uu,Uu,Uu,Uh,Uu,Uu,Uu,Uh,Uu,Uu,Uu,Uh,Uu,Uu,Uu,Uh,Uu,Uu,Uu,Uh,Uu,Uh,Uh,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Rd,Ur^Dr,Ur^Dr,Ur^Dr,Ur^Dr,Ur^Dr,Ur^Dr,Ur^Dr,Ur^Dr,Ur^Dr,Ur^Dr,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf"}
			[/then]
		)}
		{IF_VAR terr_rand greater_than 14 (
			[then]
				{RANDOMIZE_TERRAIN (
					terrain=Wwf
				) "Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf,Wwf^Wel,Wwf^Wel,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Wwr,Ds,Ds,Ds,Ds,Ds,Ss,Ss,Ss,Ss,Ss,Ss,Ss,Ss,Ss,Ss,Ss,Ss,Ss,Ss,Ss,Wwf^Dr,Wwf^Dr,Wwf^Dr,Wwf^Dr,Wwf^Dr,Wwf^Dr,Wwf^Dr,Wwf^Dr,Wwf^Dr,Wwf^Dr,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf"}
			[/then]
		)}
		{IF_VAR terr_rand greater_than 16 (
			[then]
				{RANDOMIZE_TERRAIN (
					terrain=Rr
				) "Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr,Rr^Wel,Rr^Dr,Rr^Dr,Rr^Dr,Rr^Dr,Ur,Rd,Uh,Uu,Uu^Uf"}
			[/then]
		)}
		{IF_VAR terr_rand greater_than 18 (
			[then]
				{RANDOMIZE_TERRAIN (
					terrain=Cux
				) "Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux,Cux^Wel,Cux^Dr,Cux^Dr,Cux^Dr,Cux^Dr,Cux^Dr,Cux^Dr,Cux^Dr,Cux^Dr,Uh,Uu,Uh,Uu,Uh,Uu,Uh,Uu,Uh,Uu,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf,Uu^Uf"}
			[/then]
		)}
		
		
		
		
		
		# Fill in pools
		[store_locations]
			x=1-50
			y=1-50
			terrain=Ai
			variable=pool_fill
		[/store_locations]
		{FOREACH pool_fill i}
			{MODIFY_TERRAIN $pool_flavor $pool_fill[$i].x $pool_fill[$i].y}
		{NEXT i}
		{CLEAR_VARIABLE pool_fill}		
	)}
#enddef

	




