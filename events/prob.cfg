#prob_list events.  use macros (see prob-utils.cfg) set up variables needed for events beforehand, fire events, and clear variables afterwards
[event]
	name=prob_list_create
	first_time_only=no
	[set_variables]
		name=$prob_args.path|.entry
		mode=replace
		[split]
			list=$prob_args.items
			key=item
			separator=","
			remove_empty=yes
		[/split]
	[/set_variables]
	[set_variables]
		name=prob_args.temp_array
		mode=replace
		[split]
			list=$prob_args.probs
			key=prob
			separator=","
			remove_empty=no
		[/split]
	[/set_variables]
	{VARIABLE $prob_args.path|.total_count 0}
	{FOREACH $prob_args.path|.entry i}
		[if]
			[variable]
				name=i
				greater_than_equal_to=$prob_args.temp_array.length
			[/variable]
			#is [then] optional???
			[then]
				{CLEAR_VARIABLE prob_args.path|.entry[$i]}
				{VARIABLE_OP i add -1}
			[/then]
			[else]
				[if]
					[variable]
						name=prob_args.temp_array[$i].prob
						greater_than=0
					[/variable]
					[then]
						{VARIABLE $prob_args.path|.entry[$i].prob $prob_args.temp_array[$i].prob}
						{VARIABLE_OP $prob_args.path|.total_count add $prob_args.temp_array[$i].prob}
					[/then]
					[else]
						{CLEAR_VARIABLE $prob_args.path|.entry[$i]}
						{CLEAR_VARIABLE prob_args.temp_array[$i]}
						{VARIABLE_OP i add -1}
					[/else]
				[/if]
			[/else]
		[/if]
	{NEXT i}
[/event]
[event]
	name=prob_list_operation
	first_time_only=no
	[switch]
		variable=prob_op
		[case]
			value=set
			[if]
				[variable]
					name=prob_args.prob
					numerical_equals=0
				[/variable]
				[then]
					[fire_event]
						name=prob_list_clear
					[/fire_event]
				[/then]
				[else]
					[if]
						[variable]
							name=prob_args.prob
							greater_than=0
						[/variable]
						[then]
							[fire_event]
								name=prob_list_set
							[/fire_event]
						[/then]
					[/if]
				[/else]
			[/if]
		[/case]
		[case]
			value=add
			[if]
				[variable]
					name=prob_args.prob
					greater_than=0
				[/variable]
				[then]
					[fire_event]
						name=prob_list_add
					[/fire_event]
				[/then]
				[else]
					[if]
						[variable]
							name=prob_args.prob
							less_than=0
						[/variable]
						[then]
							{VARIABLE_OP prob_args.prob multiply -1}
							[fire_event]
								name=prob_list_subtract
							[/fire_event]
						[/then]
					[/if]
				[/else]
			[/if]
		[/case]
		[case]
			value=subtract
			[if]
				[variable]
					name=prob_args.prob
					greater_than=0
				[/variable]
				[then]
					[fire_event]
						name=prob_list_subtract
					[/fire_event]
				[/then]
				[else]
					[if]
						[variable]
							name=prob_args.prob
							less_than=0
						[/variable]
						[then]
							{VARIABLE_OP prob_args.prob multiply -1}
							[fire_event]
								name=prob_list_add
							[/fire_event]
						[/then]
					[/if]
				[/else]
			[/if]
		[/case]
		[case]
			value=percent
			[if]
				[variable]
					name=prob_args.prob
					greater_than=0
				[/variable]
				[then]
					[fire_event]
						name=prob_list_percent
					[/fire_event]
				[/then]
				[else]
					[fire_event]
						name=prob_list_clear
					[/fire_event]
				[/else]
			[/if]
		[/case]
	[/switch]
[/event]
[event]
	name=prob_list_clear
	first_time_only=no
	{FOREACH $prob_args.path|.entry i}
		[if]
			[variable]
				name=$prob_args.path|.entry[$i].item
				equals=$prob_args.item
			[/variable]
			[then]
				{VARIABLE_OP prob_args.path|.total_count add -$$prob_args.path|.entry[$i].prob}
				{CLEAR_VARIABLE $prob_args.path|.entry[$i]}
				{VARIABLE i $prob_args.path|.entry.length}
			[/then]
		[/if]
	{NEXT i}
[/event]
[event]
	name=prob_list_random
	first_time_only=no
	[if]
		[variable]
			name=$prob_args.path|.total_count
			greater_than=0
		[/variable]
		[then]
			[set_variable]
				name=$prob_args.result
				rand=1..$$prob_args.path|.total_count
			[/set_variable]
			{FOREACH $prob_args.path|.entry i}
				[if]
					[variable]
						name=$prob_args.result
						less_than_equal_to=$$prob_args.path|.entry[$i].prob
					[/variable]
					[then]
						{VARIABLE $prob_args.result $$prob_args.path|.entry[$i].item}
						{VARIABLE i $$prob_args.path|.entry.length}
					[/then]
					[else]
						{VARIABLE_OP $prob_args.result add -$$prob_args.path|.entry[$i].prob}
					[/else]
				[/if]
			{NEXT i}
		[/then]
		[else]
			{CLEAR_VARIABLE $prob_args.result}
		[/else]
	[/if]
[/event]
[event]
	name=prob_list_get
	first_time_only=no
	{VARIABLE $prob_args.result 0}
	{FOREACH $prob_args.path|.entry i}
		[if]
			[variable]
				name=$prob_args.path|.entry[$i].item
				equals=$prob_args.item
			[/variable]
			[then]
				{VARIABLE $prob_args.result $$prob_args.path|.entry[$i].prob}
				{VARIABLE i $$prob_args.path|.entry.length}
			[/then]
		[/if]
	{NEXT i}
[/event]
[event]
	name=prob_list_set
	first_time_only=no
	{VARIABLE prob_args.found_entry 0}
	{FOREACH $prob_args.path|.entry i}
		[if]
			[variable]
				name=$prob_args.path|.entry[$i].item
				equals=$prob_args.item
			[/variable]
			[then]
				{VARIABLE_OP $prob_args.path|.total_count add -$$prob_args.path|.entry[$i].prob}
				{VARIABLE_OP $prob_args.path|.total_count add $prob_args.prob}
				{VARIABLE $prob_args.path|.entry[$i].prob $prob_args.prob}
				{VARIABLE prob_args.found_entry 1}
				{VARIABLE i $$prob_args.path|.entry.length}
			[/then]
		[/if]
	{NEXT i}
	[if]
		[variable]
			name=prob_args.found_entry
			numerical_equals=0
		[/variable]
		[then]
			[set_variables]
				name=$prob_args.path|.entry
				mode=append
				[value]
					item=$prob_args.item
					prob=$prob_args.prob
				[/value]
			[/set_variables]
			[if]
				[variable]
					name=$prob_args.path|.total_count
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP $prob_args.path|.total_count add $prob_args.prob}
				[/then]
				[else]
					{VARIABLE $prob_args.path|.total_count $prob_args.prob}
				[/else]
			[/if]
		[/then]
	[/if]
[/event]
[event]
	name=prob_list_add
	first_time_only=no
	{VARIABLE prob_args.found_entry 0}
	{FOREACH $prob_args.path|.entry i}
		[if]
			[variable]
				name=$prob_args.path|.entry[$i].item
				equals=$prob_args.item
			[/variable]
			[then]
				{VARIABLE_OP $prob_args.path|.entry[$i].prob add $prob_args.prob}
				{VARIABLE prob_args.found_entry 1}
				{VARIABLE i $$prob_args.path|.entry.length}
			[/then]
		[/if]
	{NEXT i}
	[if]
		[variable]
			name=prob_args.found_entry
			numerical_equals=0
		[/variable]
		[then]
			[set_variables]
				name=$prob_args.path|.entry
				mode=append
				[value]
					item=$prob_args.item
					prob=$prob_args.prob
				[/value]
			[/set_variables]
		[/then]
	[/if]
	[if]
		[variable]
			name=$prob_args.path|.total_count
			greater_than=0
		[/variable]
		[then]
			{VARIABLE_OP $prob_args.path|.total_count add $prob_args.prob}
		[/then]
		[else]
			{VARIABLE $prob_args.path|.total_count $prob_args.prob}
		[/else]
	[/if]
[/event]
[event]
	name=prob_list_subtract
	first_time_only=no
	{FOREACH $prob_args.path|.entry i}
		[if]
			[variable]
				name=$prob_args.path|.entry[$i].item
				equals=$prob_args.item
			[/variable]
			[then]
				[if]
					[variable]
						name=$prob_args.path|.entry[$i].prob
						greater_than=$prob_args.prob
					[/variable]
					[then]
						{VARIABLE_OP $prob_args.path|.total_count add -$prob_args.prob}
						{VARIABLE_OP $prob_args.path|.entry[$i].prob add -$prob_args.prob}
					[/then]
					[else]
						{VARIABLE_OP $prob_args.path|.total_count add -$$prob_args.path|.entry[$i].prob}
						{CLEAR_VARIABLE $prob_args.path|.entry[$i]}
					[/else]
				[/if]
				{VARIABLE i $$prob_args.path|.entry.length}
			[/then]
		[/if]
	{NEXT i}
[/event]
[event]
	name=prob_list_percent
	first_time_only=no
	{FOREACH $prob_args.path|.entry i}
		[if]
			[variable]
				name=$prob_args.path|.entry[$i].item
				equals=$prob_args.item
			[/variable]
			[then]
				{VARIABLE_OP $prob_args.path|.total_count add -$$prob_args.path|.entry[$i].prob}
				{VARIABLE_OP $prob_args.path|.entry[$i].prob multiply $prob_args.prob}
				{VARIABLE_OP $prob_args.path|.entry[$i].prob multiply 0.01}
				{VARIABLE_OP $prob_args.path|.entry[$i].prob round ceil}
				{VARIABLE_OP $prob_args.path|.total_count add $$prob_args.path|.entry[$i].prob}
				{VARIABLE i $$prob_args.path|.entry.length}
			[/then]
		[/if]
	{NEXT i}
[/event]