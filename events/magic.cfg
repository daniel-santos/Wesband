[event]
    name=healing_display
    first_time_only=no
    #requires $healing_number to be set
    {VARIABLE curing 0}
    [if]
        [variable]
            name=healing_number
            greater_than=7
        [/variable]
        [then]
            [if]
                [variable]
                    name=target_unit.status.poisoned
                    equals=yes
                [/variable]
                [then]
                    {VARIABLE target_unit.status.poisoned "no"}
                    {VARIABLE display_hp "cured"}
                    {VARIABLE curing 1}
                [/then]
            [/if]
        [/then]
    [/if]
    [if]
        [variable]
            name=curing
            numerical_equals=0
        [/variable]
        [then]
            [if]
                [variable]
                    name=target_unit.hitpoints
                    greater_than_equal_to=$target_unit.max_hitpoints
                [/variable]
                [then]
                    {VARIABLE display_hp 0}
                [/then]
                [else]
                    {VARIABLE orig_hp $target_unit.hitpoints}
                    {VARIABLE_OP target_unit.hitpoints add $healing_number}
                    {VARIABLE display_hp $healing_number}
                    [if]
                        [variable]
                            name=target_unit.hitpoints
                            greater_than=$target_unit.max_hitpoints
                        [/variable]
                        [then]
                            {VARIABLE display_hp $target_unit.max_hitpoints}
                            {VARIABLE_OP display_hp sub $orig_hp}
                            {VARIABLE target_unit.hitpoints $target_unit.max_hitpoints}
                        [/then]
                    [/if]
                [/else]
            [/if]
        [/then]
    [/if]
    [sound]
        name=heal.wav
    [/sound]
[/event]

[event]
    name=attack end
    first_time_only=no
    [filter]
        [filter_wml]
            [variables]
                phoenix_filter=1
            [/variables]
        [/filter_wml]
    [/filter]
    [if]
        [variable]
            name=unit.hitpoints
            less_than_equal_to=0
        [/variable]
        [then]
            [if]
                #unlikely to exceed max hp, but better safe than sorry
                [variable]
                    name=unit.variables.phoenix_fire
                    greater_than=$unit.max_hitpoints
                [/variable]
                [then]
                    {VARIABLE unit.hitpoints $unit.max_hitpoints}
                [/then]
                [else]
                    {VARIABLE unit.hitpoints $unit.variables.phoenix_fire}
                [/else]
            [/if]
            {CLEAR_VARIABLE unit.variables.phoenix_fire,unit.variables.phoenix_filter}
            {CLEAR_SPELL_DISPLAY phoenix_fire unit}
            {VARIABLE unit.status.slowed yes}
            [unstore_unit]
                variable=unit
                text=$unit.hitpoints
                {COLOR_HEAL}
            [/unstore_unit]
        [/then]
    [/if]
[/event]
[event]
    name=attack end
    first_time_only=no
    [filter_second]
        [filter_wml]
            [variables]
                phoenix_filter=1
            [/variables]
        [/filter_wml]
    [/filter_second]
    [if]
        [variable]
            name=second_unit.hitpoints
            less_than_equal_to=0
        [/variable]
        [then]
            [if]
                #unlikely to exceed max hp, but better safe than sorry
                [variable]
                    name=second_unit.variables.phoenix_fire
                    greater_than=$second_unit.max_hitpoints
                [/variable]
                [then]
                    {VARIABLE second_unit.hitpoints $second_unit.max_hitpoints}
                [/then]
                [else]
                    {VARIABLE second_unit.hitpoints $second_unit.variables.phoenix_fire}
                [/else]
            [/if]
            {VARIABLE second_unit.status.slowed yes}
            {CLEAR_VARIABLE second_unit.variables.phoenix_fire,second_unit.variables.phoenix_filter}
            {CLEAR_SPELL_DISPLAY phoenix_fire second_unit}
            [unstore_unit]
                variable=second_unit
                text=$second_unit.hitpoints
                {COLOR_HEAL}
            [/unstore_unit]
        [/then]
    [/if]
[/event]

#clear images from detect gold, detect units
[event]
    name=side turn
    first_time_only=no
    [for]
        array=detected_gold_locs
        variable=i
        [do]
            [remove_item]
                x,y=$detected_gold_locs[$i].x,$detected_gold_locs[$i].y
                image=icons/goldhere.png
            [/remove_item]
        [/do]
    [/for]
    {CLEAR_VARIABLE detected_gold_locs}
    [for]
        array=detected_units_locs
        variable=i
        [do]
            [remove_item]
                x,y=$detected_units_locs[$i].x,$detected_units_locs[$i].y
                image=units/unknown-unit.png
            [/remove_item]
        [/do]
    [/for]
    {CLEAR_VARIABLE detected_units_locs}
    [for]
        array=improved_detected_units_locs
        variable=i
        [do]
            {VARIABLE u 0}
            [while]
                [variable]
                    name=u
                    less_than=7
                [/variable]
                [do]
                    [remove_item]
                        x,y=$improved_detected_units_locs[$i].x,$improved_detected_units_locs[$i].y
                        image=icons/unknown-unit-$u|.png
                    [/remove_item]
                    {VARIABLE_OP u add 1}
                [/do]
            [/while]
        [/do]
    [/for]
    {CLEAR_VARIABLE improved_detected_units_locs}
[/event]

{CASTING_ACTION_EVENT white_healing HEALING_SPELL_EFFECT WHITE_HEALING_SETUP}
{CASTING_ACTION_EVENT green_healing HEALING_SPELL_EFFECT GREEN_HEALING_SETUP}
{CASTING_ACTION_EVENT spirit_healing HEALING_SPELL_EFFECT SPIRIT_HEALING_SETUP}
{CASTING_ACTION_EVENT silver_teleport SILVER_TELEPORT_EFFECT SILVER_TELEPORT_SETUP}
{CASTING_ACTION_EVENT phoenix_fire PHOENIX_FIRE_EFFECT PHOENIX_FIRE_SETUP}
{CASTING_ACTION_EVENT mapping MAPPING_EFFECT MAPPING_SETUP}
{CASTING_ACTION_EVENT detect_gold DETECT_GOLD_EFFECT DETECT_GOLD_SETUP}
{CASTING_ACTION_EVENT detect_units DETECT_UNITS_EFFECT DETECT_UNITS_SETUP}
{CASTING_ACTION_EVENT improved_detect_units IMPROVED_DETECT_UNITS_EFFECT IMPROVED_DETECT_UNITS_SETUP}
#define SUMMON_FIRE_SPELL
    {SUMMON_ELEMENTAL_EFFECT FIRE}
#enddef
{CASTING_ACTION_EVENT summon_fire_elemental SUMMON_FIRE_SPELL SUMMON_ELEMENTAL_SETUP}
#define SUMMON_EARTH_SPELL
    {SUMMON_ELEMENTAL_EFFECT EARTH}
#enddef
{CASTING_ACTION_EVENT summon_earth_elemental SUMMON_EARTH_SPELL SUMMON_ELEMENTAL_SETUP}
#define SUMMON_AIR_SPELL
    {SUMMON_ELEMENTAL_EFFECT AIR}
#enddef
{CASTING_ACTION_EVENT summon_air_elemental SUMMON_AIR_SPELL SUMMON_ELEMENTAL_SETUP}
#define SUMMON_WATER_SPELL
    {SUMMON_ELEMENTAL_EFFECT WATER}
#enddef
{CASTING_ACTION_EVENT summon_water_elemental SUMMON_WATER_SPELL SUMMON_ELEMENTAL_SETUP}
{CASTING_ACTION_EVENT protection_from_poison PROTECTION_FROM_POISON_EFFECT PROTECTION_FROM_POISON_SETUP}
{CASTING_ACTION_EVENT protection_from_slow PROTECTION_FROM_SLOW_EFFECT PROTECTION_FROM_SLOW_SETUP}
{CASTING_ACTION_EVENT protection_armor_magic PROTECTION_ARMOR_MAGIC_EFFECT PROTECTION_ARMOR_MAGIC_SETUP}

#undef SUMMON_FIRE_SPELL
#undef SUMMON_EARTH_SPELL
#undef SUMMON_AIR_SPELL
#undef SUMMON_WATER_SPELL


[event]
    name=wbd enchant weapon
    first_time_only=no

    {VARIABLE menu.inv.var $menu.unit|.variables.inventory.$menu.slot.type}
    {VARIABLE menu.item $menu.inv.var|[$$menu.unit|.variables.equipment_slots.$menu.slot.id|]}
    {VARIABLE menu.allow_type 1}

    [set_variables]
        name=ench
        [value]
            keep_going=1
            power=0
            type=nun
            add=0
            good_damage_type=0
            [item]
            [/item]
            [table]
                [ratio]
                    damage=8
                    number=20
                    arcane=0
                    fire=0
                    cold=0
                    chance_to_hit=4
                    firststrike=0
                    poison=0
                    slow=0
                    magical=0
                    drains=0
                [/ratio]
                # The minimum number of enchantment points to consume
                [min_points]
                    damage=8
                    number=20
                    arcane=40
                    fire=40
                    cold=40
                    chance_to_hit=20
                    firststrike=20
                    poison=20
                    slow=1000
                    magical=1000
                    drains=1000
                [/min_points]
                # The maximum percentage of rolled enchantment points to use
                [max_pct]
                    damage=75
                    number=75
                    arcane=100
                    fire=100
                    cold=100
                    chance_to_hit=100
                    firststrike=100
                    poison=100
                    slow=100
                    magical=100
                    drains=100
                [/max_pct]
                [is_damage_type]
                    arcane=1
                    fire=1
                    cold=1
                [/is_damage_type]
                [is_special]
                    chance_to_hit=1
                    firststrike=1
                    poison=1
                    slow=1
                    magical=1
                    drains=1
                [/is_special]
            [/table]
        [/value]
    [/set_variables]
    [set_variables]
        name=ench.item
        mode=replace
        to_variable=$menu.item
    [/set_variables]

#     {ENCHANT_CONFIRM $menu.unit| $menu.item| asdf}
    [message]
        image="wesnoth-icon.png"
        speaker="narrator"
        message=_ "You choosed $menu.slot.type|, $menu.slot.id|, $menu.unit| power=$enchant_power"
    [/message]

    {VARIABLE ench.keep_going 1}
    {VARIABLE unit_id $$menu.unit|.id}
    [while]
        [variable]
            name=ench.keep_going
            equals=1
        [/variable]
        [do]
#             [message]
#                 image="wesnoth-icon.png"
#                 speaker="narrator"
#                 message="Starting enchantments"
#             [/message]
            {IF_VAR ench.item.enchantments.count equals "" (
                [then]
                    [set_variables]
                        name=ench.item.enchantments
                        mode=replace
                        [value]
                            count=0
                            power=0
                        [/value]
                    [/set_variables]
                [/then]
            )}

            # Amount of possible improvement gradually degrades, though these values will need balancing.
            {VARIABLE_OP ench.power rand "$($enchant_power| * 10)..$($enchant_power| * 20)"}
            {VARIABLE_OP ench.power sub "$($ench.item.enchantments.power| * 4)"}
#             {VARIABLE_OP ench.power multiply 10}
            {VARIABLE ench.power.rolled $ench.power}
            # Enchantment can fail when item alreay enchanted at least once
            {IF_VAR ench.power less_than 1 (
                [then]
                    {VARIABLE ench.keep_going 0}
                    [message]
                        image="wesnoth-icon.png"
                        speaker="narrator"
                        message="Enchantment failed!"
                    [/message]
                [/then]
                [else]
                    # Add improvements until we run out of power
                    [while]
                        [variable]
                            name=ench.power
                            greater_than=0
                        [/variable]
                        [do]
                            # Set ench.good_damage_type to 1 if weapon already has type of arcane, cold or fire.
                            {VARIABLE ench.good_damage_type $ench.table.is_damage_type.$ench.item.type||}
                            [get_prob]
                                name="prob_enchant_weapon"
                                op="rand"
                                variable="ench.type"
                            [/get_prob]

                            {VARIABLE_OP spend rand $ench.table.min_points.$ench.type||..$ench.power.rolled|}
                            # Make sure we aren't over the max percent
                            {VARIABLE spend_max "$($ench.power.rolled| * $ench.table.max_pct.$ench.type|| / 100)"}
                            {VARIABLE_OP spend min "$spend,$($ench.power.rolled| * $ench.table.max_pct.$ench.type|| / 100)"}
                            [message]
                                speaker="narrator"
                                message=_ "count/total_power: $ench.item.enchantments.count|, $ench.item.enchantments.power| power: $ench.power|, type: $ench.type, spend $spend, spend_max: $spend_max"
                            [/message]
                            [if]
                                [variable]
                                    name=ench.table.is_damage_type.$ench.type|
                                    equals=1
                                [/variable]
                                # If weapon already has arcane, fire or cold, then roll again
                                [and]
                                    [not]
                                        [variable]
                                            name=ench.good_damage_type
                                            equals=1
                                        [/variable]
                                    [/not]
                                [/and]
                                [then]
                                    {VARIABLE ench.item.type $ench.type}
                                [/then]
                                [elseif]
                                    # Is this a direct property of the item?
                                    [not]
                                        [variable]
                                            name=ench.item.$ench.type|
                                            equals=""
                                        [/variable]
                                    [/not]
                                    [then]
                                        {VARIABLE ench.add "$($spend|.0 / $ench.table.ratio.$ench.type||.0)"}
                                        {VARIABLE_OP ench.add round ceil}
                                        [message]
                                            speaker="narrator"
                                            message=_ "ench.item.$ench.type| ($ench.item.$ench.type||) add $ench.add"
                                        [/message]
                                        {VARIABLE_OP ench.item.$ench.type| add $ench.add}
                                    [/then]
                                [/elseif]
                                # These don't wory by just adding them to special_types
#                                 [elseif]
#                                     # Is this a special that we don't already have?
#                                     [variable]
#                                         name=ench.table.is_special.$ench.type|
#                                         equals=1
#                                     [/variable]
#                                     [and]
#                                         [variable]
#                                             name=ench.item.special_type.$ench.type|
#                                             equals=""
#                                         [/variable]
#                                     [/and]
#                                     [then]
#                                         {VARIABLE ench.add "$($spend|.0 / $ench.table.ratio.$ench.type||.0)"}
#                                         {VARIABLE_OP ench.add round ceil}
#                                         {VARIABLE ench.item.special_type.$ench.type| $ench.add}
#                                     [/then]
#                                 [/elseif]
                                [else]
                                    # Roll again
                                    {VARIABLE spend 0}
                                [/else]
                            [/if]
                            {VARIABLE_OP ench.power sub $spend|}

                            {IF_VAR spend greater_than 0 (
                                [then]
                                    # Keep track of how many times item has been enchanted and it's total enchantment power
                                    {VARIABLE_OP ench.item.enchantments.count add 1}
                                    {VARIABLE_OP ench.item.enchantments.power add $enchant_power|}
                                [/then]
                            )}
#                             [unstore_unit]
#                                 variable=$menu.unit
#                             [/unstore_unit]
#                             [store_unit]
#                                 variable=$menu.unit
#                                 [filter]
#                                     id=$menu.unit_id
#                                 [/filter]
#                             [/store_unit]
                        [/do]
                    [/while]
                [/else]
            )}
            {VARIABLE ench.keep_going 0}
        [/do]
    [/while]
    [set_variables]
        name=$menu.item
        mode=replace
        to_variable=ench.item
    [/set_variables]
    {CLEAR_VARIABLE ench}
[/event]

[event]
    name=wbd enchant armor
    first_time_only=no


    {VARIABLE menu.inv.var $menu.unit|.variables.inventory.$menu.slot.type}
    {VARIABLE menu.item $menu.inv.var|[$$menu.unit|.variables.equipment_slots.$menu.slot.id|]}
    {VARIABLE menu.allow_type 1}
    {PROB_LIST prob_enchant_armor (blade,pierce,impact,fire,cold,arcane,evade_adjust,magic_adjust) (20,20,20,40,40,40,10,10)}
    [set_variables]
        name=ench
        [value]
            power=0
            type=nun
            add=0
            good_damage_type=0
            [item]
            [/item]
            [table]
                [ratio]
                    blade=5
                    pierce=5
                    impact=5
                    fire=5
                    cold=5
                    arcane=5
                    evade_adjust=20
                    magic_adjust=3
                [/ratio]
                # The minimum number of enchantment points to consume
                [min_points]
                    blade=4
                    pierce=4
                    impact=4
                    fire=4
                    cold=4
                    arcane=4
                    evade_adjust=10
                    magic_adjust=5
                [/min_points]
                # The maximum percentage of rolled enchantment points to use
                [max_pct]
                    blade=40
                    pierce=40
                    impact=40
                    fire=40
                    cold=40
                    arcane=40
                    evade_adjust=80
                    magic_adjust=80
                [/max_pct]
                [is_resist]
                    blade=1
                    pierce=1
                    impact=1
                    fire=1
                    cold=1
                    arcane=1
                [/is_resist]
            [/table]
        [/value]
    [/set_variables]
    [set_variables]
        name=ench.item
        mode=replace
        to_variable=$menu.item
    [/set_variables]

#     {ENCHANT_CONFIRM $menu.unit| $menu.item| asdf}
    [message]
        image="wesnoth-icon.png"
        speaker="narrator"
        message=_ "You choosed $menu.slot.type|, $menu.slot.id|, $menu.unit| power=$enchant_power"
    [/message]

    {IF_VAR ench.item.enchantments.count equals "" (
        [then]
            [set_variables]
                name=ench.item.enchantments
                mode=replace
                [value]
                    count=0
                    power=0
                [/value]
            [/set_variables]
        [/then]
    )}

    # Amount of possible improvement gradually degrades, though these values will need balancing.
    {VARIABLE_OP ench.power rand "$($enchant_power| * 10)..$($enchant_power| * 20)"}
    {VARIABLE_OP ench.power sub "$($ench.item.enchantments.power| * 4)"}
    {VARIABLE_OP ench.power multiply 10}
    {VARIABLE ench.power.rolled $ench.power}
    # Enchantment can fail when item alreay enchanted at least once
    {IF_VAR ench.power less_than 1 (
        [then]
            [message]
                image="wesnoth-icon.png"
                speaker="narrator"
                message="Enchantment failed!"
            [/message]
        [/then]
        [else]
            # Add improvements until we run out of power
            [while]
                [variable]
                    name=ench.power
                    greater_than=0
                [/variable]
                [do]
                    [get_prob]
                        name="prob_enchant_armor"
                        op="rand"
                        variable="ench.type"
                    [/get_prob]

                    [message]
                        speaker="narrator"
                        message=_ "$ench.table.min_points.$ench.type||..$ench.power.rolled|"
                    [/message]

                    {VARIABLE_OP spend rand $ench.table.min_points.$ench.type||..$ench.power.rolled|}
                    # Make sure we aren't over the max percent
                    {VARIABLE spend_max "$($ench.power.rolled| * $ench.table.max_pct.$ench.type|| / 100)"}
                    {VARIABLE_OP spend min "$spend,$($ench.power.rolled| * $ench.table.max_pct.$ench.type|| / 100)"}
                    [message]
                        speaker="narrator"
                        message=_ "count/total_power: $ench.item.enchantments.count|, $ench.item.enchantments.power| power: $ench.power|, type: $ench.type, spend $spend, spend_max: $spend_max"
                    [/message]
                    {VARIABLE ench.add "$($spend|.0 / $ench.table.ratio.$ench.type||.0)"}
                    {VARIABLE_OP ench.add round ceil}
                    [if]
                        # Is this a direct property of the item?
                        [not]
                            [variable]
                                name=ench.item.$ench.type|
                                equals=""
                            [/variable]
                        [/not]
                        [then]
                            [message]
                                speaker="narrator"
                                message=_ "ench.item.$ench.type| ($ench.item.$ench.type||) add $ench.add"
                            [/message]
                            {VARIABLE_OP ench.item.$ench.type| add $ench.add}
                        [/then]
                        [elseif]
                            # Is it a damage resistance?
                            [variable]
                                name=ench.table.is_resist.$ench.type|
                                equals=1
                            [/variable]
                            [then]
                                {VARIABLE_OP ench.item.resistance.$ench.type| add $ench.add}
                            [/then]
                        [/elseif]
                        [else]
                            # Roll again
                            {VARIABLE spend 0}
                        [/else]
                    [/if]
                    {VARIABLE_OP ench.power sub $spend|}

                    {IF_VAR spend greater_than 0 (
                        [then]
                            # Keep track of how many times item has been enchanted and it's total enchantment power
                            {VARIABLE_OP ench.item.enchantments.count add 1}
                            {VARIABLE_OP ench.item.enchantments.power add $enchant_power|}
                        [/then]
                    )}
                [/do]
            [/while]
        [/else]
    )}
    [set_variables]
        name=$menu.item
        mode=replace
        to_variable=ench.item
    [/set_variables]
    {CLEAR_VARIABLE ench}
[/event]
