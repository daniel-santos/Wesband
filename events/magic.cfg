[event]
    name=healing_display
    first_time_only=no
    #requires $healing_number to be set
    {VARIABLE curing 0}
    [if]
        [variable]
            name=healing_number
            greater_than=7
        [/variable]
        [then]
            [if]
                [variable]
                    name=target_unit.status.poisoned
                    equals=yes
                [/variable]
                [then]
                    {VARIABLE target_unit.status.poisoned "no"}
                    {VARIABLE display_hp "cured"}
                    {VARIABLE curing 1}
                [/then]
            [/if]
        [/then]
    [/if]
    [if]
        [variable]
            name=curing
            numerical_equals=0
        [/variable]
        [then]
            [if]
                [variable]
                    name=target_unit.hitpoints
                    greater_than_equal_to=$target_unit.max_hitpoints
                [/variable]
                [then]
                    {VARIABLE display_hp 0}
                [/then]
                [else]
                    {VARIABLE orig_hp $target_unit.hitpoints}
                    {VARIABLE_OP target_unit.hitpoints add $healing_number}
                    {VARIABLE display_hp $healing_number}
                    [if]
                        [variable]
                            name=target_unit.hitpoints
                            greater_than=$target_unit.max_hitpoints
                        [/variable]
                        [then]
                            {VARIABLE display_hp $target_unit.max_hitpoints}
                            {VARIABLE_OP display_hp sub $orig_hp}
                            {VARIABLE target_unit.hitpoints $target_unit.max_hitpoints}
                        [/then]
                    [/if]
                [/else]
            [/if]
        [/then]
    [/if]
    [sound]
        name=heal.wav
    [/sound]
[/event]

[event]
    name=attack end
    first_time_only=no
    [filter]
        [filter_wml]
            [variables]
                phoenix_filter=1
            [/variables]
        [/filter_wml]
    [/filter]
    [if]
        [variable]
            name=unit.hitpoints
            less_than_equal_to=0
        [/variable]
        [then]
            [if]
                #unlikely to exceed max hp, but better safe than sorry
                [variable]
                    name=unit.variables.phoenix_fire
                    greater_than=$unit.max_hitpoints
                [/variable]
                [then]
                    {VARIABLE unit.hitpoints $unit.max_hitpoints}
                [/then]
                [else]
                    {VARIABLE unit.hitpoints $unit.variables.phoenix_fire}
                [/else]
            [/if]
            {CLEAR_VARIABLE unit.variables.phoenix_fire,unit.variables.phoenix_filter}
            {CLEAR_SPELL_DISPLAY phoenix_fire unit}
            {VARIABLE unit.status.slowed yes}
            [unstore_unit]
                variable=unit
                text=$unit.hitpoints
                {COLOR_HEAL}
            [/unstore_unit]
        [/then]
    [/if]
[/event]
[event]
    name=attack end
    first_time_only=no
    [filter_second]
        [filter_wml]
            [variables]
                phoenix_filter=1
            [/variables]
        [/filter_wml]
    [/filter_second]
    [if]
        [variable]
            name=second_unit.hitpoints
            less_than_equal_to=0
        [/variable]
        [then]
            [if]
                #unlikely to exceed max hp, but better safe than sorry
                [variable]
                    name=second_unit.variables.phoenix_fire
                    greater_than=$second_unit.max_hitpoints
                [/variable]
                [then]
                    {VARIABLE second_unit.hitpoints $second_unit.max_hitpoints}
                [/then]
                [else]
                    {VARIABLE second_unit.hitpoints $second_unit.variables.phoenix_fire}
                [/else]
            [/if]
            {VARIABLE second_unit.status.slowed yes}
            {CLEAR_VARIABLE second_unit.variables.phoenix_fire,second_unit.variables.phoenix_filter}
            {CLEAR_SPELL_DISPLAY phoenix_fire second_unit}
            [unstore_unit]
                variable=second_unit
                text=$second_unit.hitpoints
                {COLOR_HEAL}
            [/unstore_unit]
        [/then]
    [/if]
[/event]

#clear images from detect gold, detect units
[event]
    name=side turn
    first_time_only=no
    [for]
        array=detected_gold_locs
        variable=i
        [do]
            [remove_item]
                x,y=$detected_gold_locs[$i].x,$detected_gold_locs[$i].y
                image=icons/goldhere.png
            [/remove_item]
        [/do]
    [/for]
    {CLEAR_VARIABLE detected_gold_locs}
    [for]
        array=detected_units_locs
        variable=i
        [do]
            [remove_item]
                x,y=$detected_units_locs[$i].x,$detected_units_locs[$i].y
                image=units/unknown-unit.png
            [/remove_item]
        [/do]
    [/for]
    {CLEAR_VARIABLE detected_units_locs}
    [for]
        array=improved_detected_units_locs
        variable=i
        [do]
            {VARIABLE u 0}
            [while]
                [variable]
                    name=u
                    less_than=7
                [/variable]
                [do]
                    [remove_item]
                        x,y=$improved_detected_units_locs[$i].x,$improved_detected_units_locs[$i].y
                        image=icons/unknown-unit-$u|.png
                    [/remove_item]
                    {VARIABLE_OP u add 1}
                [/do]
            [/while]
        [/do]
    [/for]
    {CLEAR_VARIABLE improved_detected_units_locs}
[/event]

{CASTING_ACTION_EVENT white_healing HEALING_SPELL_EFFECT WHITE_HEALING_SETUP}
{CASTING_ACTION_EVENT green_healing HEALING_SPELL_EFFECT GREEN_HEALING_SETUP}
{CASTING_ACTION_EVENT spirit_healing HEALING_SPELL_EFFECT SPIRIT_HEALING_SETUP}
{CASTING_ACTION_EVENT silver_teleport SILVER_TELEPORT_EFFECT SILVER_TELEPORT_SETUP}
{CASTING_ACTION_EVENT phoenix_fire PHOENIX_FIRE_EFFECT PHOENIX_FIRE_SETUP}
{CASTING_ACTION_EVENT mapping MAPPING_EFFECT MAPPING_SETUP}
{CASTING_ACTION_EVENT detect_gold DETECT_GOLD_EFFECT DETECT_GOLD_SETUP}
{CASTING_ACTION_EVENT detect_units DETECT_UNITS_EFFECT DETECT_UNITS_SETUP}
{CASTING_ACTION_EVENT improved_detect_units IMPROVED_DETECT_UNITS_EFFECT IMPROVED_DETECT_UNITS_SETUP}
#define SUMMON_FIRE_SPELL
    {SUMMON_ELEMENTAL_EFFECT FIRE}
#enddef
{CASTING_ACTION_EVENT summon_fire_elemental SUMMON_FIRE_SPELL SUMMON_ELEMENTAL_SETUP}
#define SUMMON_EARTH_SPELL
    {SUMMON_ELEMENTAL_EFFECT EARTH}
#enddef
{CASTING_ACTION_EVENT summon_earth_elemental SUMMON_EARTH_SPELL SUMMON_ELEMENTAL_SETUP}
#define SUMMON_AIR_SPELL
    {SUMMON_ELEMENTAL_EFFECT AIR}
#enddef
{CASTING_ACTION_EVENT summon_air_elemental SUMMON_AIR_SPELL SUMMON_ELEMENTAL_SETUP}
#define SUMMON_WATER_SPELL
    {SUMMON_ELEMENTAL_EFFECT WATER}
#enddef
{CASTING_ACTION_EVENT summon_water_elemental SUMMON_WATER_SPELL SUMMON_ELEMENTAL_SETUP}
{CASTING_ACTION_EVENT protection_from_poison PROTECTION_FROM_POISON_EFFECT PROTECTION_FROM_POISON_SETUP}
{CASTING_ACTION_EVENT protection_from_slow PROTECTION_FROM_SLOW_EFFECT PROTECTION_FROM_SLOW_SETUP}
{CASTING_ACTION_EVENT protection_armor_magic PROTECTION_ARMOR_MAGIC_EFFECT PROTECTION_ARMOR_MAGIC_SETUP}

#undef SUMMON_FIRE_SPELL
#undef SUMMON_EARTH_SPELL
#undef SUMMON_AIR_SPELL
#undef SUMMON_WATER_SPELL


#define ENCHANT_ITEM PROB_TABLE INIT BODY
    {CONFIRM_ACTION $menu.unit|}

    {VARIABLE menu.inv.var $menu.unit|.variables.inventory.$menu.slot.type}
    {VARIABLE menu.item $menu.inv.var|[$$menu.unit|.variables.equipment_slots.$menu.slot.id|]}

    {INIT}

    [set_variables]
        name=ench.item
        mode=replace
        to_variable=$menu.item
    [/set_variables]

#     {ENCHANT_CONFIRM $menu.unit| $menu.item| asdf}
#     [message]
#         image="wesnoth-icon.png"
#         speaker="narrator"
#         message=_ "You choosed $menu.slot.type|, $menu.slot.id|, $menu.unit| levels=$enchant_level"
#     [/message]

    {IF_VAR ench.item.enchantments.count equals "" (
        [then]
            [set_variables]
                name=ench.item.enchantments
                mode=replace
                [value]
                    count=0
                    levels=0
                    power=0
                    enhancments=0
                [/value]
            [/set_variables]
        [/then]
    )}

    # Amount of possible improvement gradually degrades, though these values will need balancing.
    {VARIABLE_OP ench.points rand "$($enchant_level| * $ench.mult_min)..$($enchant_level| * $ench.mult_max)"}
    {VARIABLE    ench.points_orig $ench.points}
    {VARIABLE    ench.penalty "$($ench.item.enchantments.power| * $ench.mult_penalty)"}
    {VARIABLE_OP ench.points sub $ench.penalty}
    {VARIABLE    ench.points_start $ench.points}

    [message]
        image="wesnoth-icon.png"
        speaker="narrator"
        message=_ "Enchant $menu.slot.id| level $enchant_level| roll: $ench.points| points ($ench.penalty penalty)"
    [/message]

    # Enchantment can fail when item alreay enchanted at least once
    {IF_VAR ench.points less_than 1 (
        [then]
            {VARIABLE ench.keep_going 0}
            [message]
                image="wesnoth-icon.png"
                speaker="narrator"
                message="Enchantment failed!"
            [/message]
        [/then]
        [else]
            # Add improvements until we run out of points
            [while]
                [variable]
                    name=ench.points
                    greater_than=0
                [/variable]
                [do]
                    [get_prob]
                        name="{PROB_TABLE}"
                        op="rand"
                        variable="ench.type"
                    [/get_prob]

                    {VARIABLE_OP ench.spend rand $ench.table.min_points.$ench.type||..$ench.points_start|}
                    # Make sure we aren't over the max percent
                    {VARIABLE ench.spend_max "$($ench.points_start| * $ench.table.max_pct.$ench.type|| / 100)"}
                    {VARIABLE_OP ench.spend min "$ench.spend|,$ench.spend_max|,$ench.points|"}
                    {VARIABLE_OP ench.spend round ceil}
                    # Cost per unit of what we're upgrading
                    {VARIABLE ench.cost $ench.table.cost.$ench.type||}

                    [if]
                        [variable]
                            name=ench.spend
                            less_than=$ench.cost
                        [/variable]
                        [or]
                            [variable]
                                name=ench.table.plural.$ench.type|
                                numerical_equals=0
                            [/variable]
                        [/or]
                        [then]
                            # Spend exactly what it costs for one unit (or for the singular quality)
                            {VARIABLE ench.spend $ench.cost}
                            {VARIABLE ench.add 1}
                        [/then]
                        [else]
                            # Round up to multiple of cost per unit
                            {VARIABLE_OP ench.spend add "$($ench.cost - 1)"}
                            {VARIABLE_OP ench.spend divide $ench.cost}
                            {VARIABLE_OP ench.spend round floor}
                            {VARIABLE    ench.add $ench.spend}
                            {VARIABLE_OP ench.spend multiply $ench.cost}
                        [/else]
                    )}

                    [message]
                        image="wesnoth-icon.png"
                        speaker="narrator"
                        message=_ "Enchantment<small>
type, cost per: $ench.type|, $ench.cost|
min_points, max_pct:$ench.table.min_points.$ench.type||, $ench.table.max_pct.$ench.type||
remaining points: $ench.points|
spending: $ench.spend</small>"
                    [/message]
                    {BODY}

                    {VARIABLE_OP ench.points sub $ench.spend|}

                    {IF_VAR ench.spend greater_than 0 (
                        [then]
                            {VARIABLE_OP ench.item.enchantments.power add $ench.spend}
                            {VARIABLE_OP ench.item.enchantments.enhancments add 1}
                        [/then]
                    )}
                    [/do]
            [/while]
            # Keep track of how many times item has been enchanted and it's total enchantment power
            {VARIABLE_OP ench.item.enchantments.count add 1}
            {VARIABLE_OP ench.item.enchantments.levels add $enchant_level|}
        [/else]
    [/if]

    [set_variables]
        name=$menu.item
        mode=replace
        to_variable=ench.item
    [/set_variables]
    {CLEAR_VARIABLE ench}
    {WBD_PAPERDOLL_CALCS}
#enddef


[event]
    name=wbd enchant weapon
    first_time_only=no

    {ENCHANT_ITEM prob_enchant_weapon (
        [set_variables]
            name=ench
            [value]
                mult_min=40
                mult_max=80
                mult_penalty="1/4"
                specials=0
                points=0
                points_start=0
                type=nun
                add=0
                good_damage_type=0
                spend=0
                spend_max=0
                [item]
                [/item]
                [table]
                    # cost per unit
                    [cost]
                        damage=50
                        number=150
                        arcane=300
                        fire=200
                        cold=200
                        chance_to_hit=25
                        firststrike=200
                        poison=400
                        slow=400
                        magical=400
                        drains=500
                    [/cost]
                    # The minimum number of enchantment points to consume
                    [min_points]
                        damage=50
                        number=150
                        arcane=300
                        fire=200
                        cold=200
                        chance_to_hit=100
                        firststrike=200
                        poison=400
                        slow=400
                        magical=400
                        drains=500
                    [/min_points]
                    # The maximum percentage of rolled enchantment points to use
                    [max_pct]
                        damage=50
                        number=50
                        arcane=100
                        fire=100
                        cold=100
                        chance_to_hit=100
                        firststrike=100
                        poison=100
                        slow=100
                        magical=100
                        drains=100
                    [/max_pct]
                    # Is this a weapon damage type
                    [is_damage_type]
                        arcane=1
                        fire=1
                        cold=1
                    [/is_damage_type]
                    # Is this a special
                    [special]
                        chance_to_hit=enchantments.add_chance_to_hit
                        firststrike=enchantments.firststrike
                        poison=special_type.poison
                        slow=enchantments.slow
                        magical=special_type.magical_to_hit
                        drains=special_type.drains
                    [/special]
                    # Is this a plural quality or singular
                    [plural]
                        damage=1
                        number=1
                        arcane=0
                        fire=0
                        cold=0
                        chance_to_hit=1
                        firststrike=0
                        poison=0
                        slow=0
                        magical=0
                        drains=0
                    [/plural]
                [/table]
            [/value]
        [/set_variables]
    ) (
        # Set ench.good_damage_type to 1 if weapon already has type of arcane, cold or fire.
        {VARIABLE ench.good_damage_type $ench.table.is_damage_type.$ench.item.type||}

        [message]
            speaker="narrator"
            message=_ "weapon: $ench.item.type|, is ench damage type: $ench.table.is_damage_type.$ench.type||, is damage type already good? $ench.table.is_damage_type.$ench.item.type||"
        [/message]
        [if]
            [not]
                [variable]
                    name=ench.table.special.$ench.type|
                    equals=""
                [/variable]
            [/not]
            [variable]
                name=ench.specials
                greater_than=0
            [/variable]
            [then]
                # One special allowed per use, roll again
                {VARIABLE ench.spend 0}
            [/then]
            [elseif]
                [variable]
                    name=ench.table.is_damage_type.$ench.type|
                    equals=1
                [/variable]
                # If weapon already has arcane, fire or cold, then roll again
                [and]
                    [not]
                        [variable]
                            name=ench.good_damage_type
                            equals=1
                        [/variable]
                    [/not]
                [/and]
                [then]
                    [message]
                        image="wesnoth-icon.png"
                        speaker="narrator"
                        message=_ "Set damage type to $ench.type|"
                    [/message]
                    {VARIABLE ench.item.type $ench.type}
                [/then]
            [/elseif]
            [elseif]
                # Is this a direct property of the item?
                [not]
                    [variable]
                        name=ench.item.$ench.type|
                        equals=""
                    [/variable]
                [/not]
                [then]
                    [message]
                        image="wesnoth-icon.png"
                        speaker="narrator"
                        message=_ "$ench.type| ($ench.item.$ench.type||) + $ench.add"
                    [/message]
                    {VARIABLE_OP ench.item.$ench.type| add $ench.add}
                [/then]
            [/elseif]
            [elseif]
                [not]
                    [variable]
                        name=ench.table.special.$ench.type|
                        equals=""
                    [/variable]
                [/not]
                [then]
                    # Is this a special we don't already have?
                    [if]
                        [variable]
                            name=ench.item.special_type.$ench.type|
                            equals=""
                        [/variable]
                        [then]
                            {VARIABLE ench.item.special_type.$ench.type| $ench.add}
                            {VARIABLE_OP ench.specials add 1}
                        [/then]
                        # Can this special be increased?
                        [elseif]
                            [variable]
                                name=ench.table.plural.$ench.type|
                                equals=1
                            [/variable]
                            [then]
                                {VARIABLE_OP ench.item.special_type.$ench.type| add $ench.add}
                                {VARIABLE_OP ench.specials add 1}
                            [/then]
                        [/elseif]
                        [else]
                            # Otherwise, we need to roll aagain.
                            {VARIABLE ench.spend 0}
                        [/else]
                    [/if]
                [/then]
            [/elseif]
            [else]
                [message]
                    image="wesnoth-icon.png"
                    speaker="narrator"
                    message=_ "can't do $ench.type| (yet?), roll again"
                [/message]
                {VARIABLE_OP ench.item.$ench.type| add $ench.add}

                # Roll again
                {VARIABLE ench.spend 0}
            [/else]
        [/if]
    )}
[/event]

[event]
    name=wbd enchant armor
    first_time_only=no
    {ENCHANT_ITEM prob_enchant_armor (
        [set_variables]
            name=ench
            [value]
                mult_min=50
                mult_max=125
                mult_penalty="1/5"
                points=0
                type=nun
                add=0
                spend=0
                spend_max=0
                [item]
                [/item]
                [table]
                    [cost]
                        blade=10
                        pierce=10
                        impact=10
                        fire=10
                        cold=10
                        arcane=10
                        evade_adjust=50
                        magic_adjust=10
                    [/cost]
                    # The minimum number of enchantment points to try to consume
                    [min_points]
                        blade=20
                        pierce=20
                        impact=20
                        fire=20
                        cold=20
                        arcane=20
                        evade_adjust=50
                        magic_adjust=50		# at least 5 points
                    [/min_points]
                    # The maximum percentage of rolled enchantment points to use
                    [max_pct]
                        blade=40
                        pierce=40
                        impact=40
                        fire=40
                        cold=40
                        arcane=40
                        evade_adjust=80
                        magic_adjust=100
                    [/max_pct]
                    [is_resist]
                        blade=1
                        pierce=1
                        impact=1
                        fire=1
                        cold=1
                        arcane=1
                    [/is_resist]
                    [plural]
                        blade=1
                        pierce=1
                        impact=1
                        fire=1
                        cold=1
                        arcane=1
                        evade_adjust=1
                        magic_adjust=1
                    [/plural]
                [/table]
            [/value]
        [/set_variables]
    ) (
        [if]
            # Is this a direct property of the item?
            [not]
                [variable]
                    name=ench.item.$ench.type|
                    equals=""
                [/variable]
            [/not]
            [then]
                [message]
                    speaker="narrator"
                    message=_ "$ench.type| ($ench.item.$ench.type||) + $ench.add"
                [/message]
                {VARIABLE_OP ench.item.$ench.type| add $ench.add}
            [/then]
            [elseif]
                # Is it a damage resistance?
                [variable]
                    name=ench.table.is_resist.$ench.type|
                    equals=1
                [/variable]
                [then]
                    [message]
                        speaker="narrator"
                        message=_ "$ench.type| ($ench.item.resistance.$ench.type||) + $ench.add"
                    [/message]
                    {VARIABLE_OP ench.item.resistance.$ench.type| add $ench.add}
                [/then]
            [/elseif]
            [else]
                # Roll again
                {VARIABLE ench.spend 0}
            [/else]
        [/if]
    )}
[/event]

#undef ENCHANT_ITEM
