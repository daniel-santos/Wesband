#grant PCs talentpoints, level every 5 sub-levels, clear poison/slow on level
[event]
	name=post_advance
	first_time_only=no

	[filter]
		canrecruit=yes
	[/filter]
	# We're going to start keeping track of total experience (after leveling) to make it
	# easier to experiment with game ballance of leveling, talentpoints, and such. This
	# will make it easier to re-create a unit after altering the rules.
	{VARIABLE_OP unit.variables.total.experience add $unit.max_experience}
	{VARIABLE_OP unit.variables.leveledup add 1}

	[if]
		[variable]
			name=unit.variables.leveledup
			numerical_equals=5
		[/variable]
		[then]
			{VARIABLE unit.status.poisoned "no"}
			{VARIABLE unit.status.slowed "no"}
			{VARIABLE_OP unit.level add 1}
			{VARIABLE unit.variables.leveledup 0}
		[/then]
	[/if]

	{VARIABLE real_level "$($unit.variables.leveledup + ($unit.level - 1) * 5)"}
	{VARIABLE where_clause "level = $unit.level, sub_level = $unit.variables.leveledup, real_level = $real_level, max_experience = $unit.max_experience"}
	{VARIABLE tp_add "$($opts.pc.tp_increase_wfl| where $where_clause|)"}
	{VARIABLE_OP unit.variables.talentpoints add $tp_add}
	{VARIABLE_OP unit.variables.total.talent add $tp_add}
	[dump_wml]
		name=post_advance
		[value]
			[unit]
				id=$unit.id
				name=$unit.name
				talentpoints=$unit.variables.talentpoints
			[/unit]
			tp_add_base="$(($unit.level + 1) * 4)"
			tp_increase_wfl="$opts.pc.tp_increase_wfl"
			where_clause=$where_clause
			tp_add=$tp_add
		[/value]
	[/dump_wml]

	# Doubling the amount of experience points needed for the next level is a fairly traditional model in RPGs.
	# Incidentally, 1.148698355 is the 5th root of 2, so +15% max_experience increase per sub-level is almost
	# equivilant with +101.135% (before rounding) per Wesband level.
	{VARIABLE_OP unit.max_experience add "$(max(1, as_decimal($unit.max_experience) * $opts.pc.max_experience.increase / 100))"}
	{VARIABLE_OP unit.max_experience round 0}

	{CLEAR_VARIABLE where_clause}
	{CLEAR_VARIABLE tp_add}
	{CLEAR_VARIABLE real_level}

	{VARIABLE hp_max $unit.max_hitpoints}
	{VARIABLE_OP hp_max multiply .20}
	{VARIABLE_OP unit.hitpoints add $hp_max}
	{VARIABLE_OP unit.max_hitpoints add $unit.level}
	{VARIABLE_OP unit.hitpoints add $unit.level}
	[if]
		[variable]
			name=unit.hitpoints
			greater_than=$unit.max_hitpoints
		[/variable]
		[then]
			{VARIABLE unit.hitpoints $unit.max_hitpoints}
		[/then]
	[/if]

	[unstore_unit]
		variable=unit
	[/unstore_unit]
[/event]

[event]
	name=turn refresh
	first_time_only=no
	#refresh simple action
	[store_unit]
		[filter]
			side=$side_number
		[/filter]
		variable=refresh
	[/store_unit]
	#refresh simple actions, reset casting actions
	[for]
		array=refresh
		variable=i
		[do]
			{VARIABLE refresh_unstore_flag 0}
			[if]
				[variable]
					name=refresh[$i].status.petrified
					not_equals="yes"
				[/variable]
				[then]
					#for now...
					[if]
						[variable]
							name=refresh[$i].variables.max_simple_action
							numerical_not_equals=1
						[/variable]
						[then]
							{VARIABLE refresh[$i].variables.max_simple_action 1}
						[/then]
					[/if]
					{VARIABLE refresh[$i].variables.simple_action $refresh[$i].variables.max_simple_action}
					{VARIABLE refresh[$i].variables.casting_actions 0}
					{VARIABLE refresh_unstore_flag 1}
				[/then]
			[/if]
			# phoenix fire
			[if]
				[variable]
					name=refresh[$i].variables.phoenix_filter
					numerical_equals=1
				[/variable]
				[then]
					{VARIABLE_OP refresh[$i].variables.phoenix_fire sub 4}
					{CLEAR_SPELL_DISPLAY phoenix_fire (refresh[$i])}
					[if]
						[variable]
							name=refresh[$i].variables.phoenix_fire
							less_than_equal_to=0
						[/variable]
						[then]
							{CLEAR_VARIABLE refresh[$i].variables.phoenix_fire,refresh[$i].variables.phoenix_filter}
						[/then]
						[else]
							{PHOENIX_FIRE_APPLY refresh[$i]}
						[/else]
					[/if]
					{VARIABLE refresh_unstore_flag 1}
				[/then]
			[/if]
			# protection from poison
			[if]
				[variable]
					name=refresh[$i].variables.status.protection_from_poison
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP refresh[$i].variables.status.protection_from_poison sub 1}
					{CLEAR_SPELL_DISPLAY protection_from_poison (refresh[$i])}
					[if]
						[variable]
							name=refresh[$i].variables.status.protection_from_poison
							greater_than=0
						[/variable]
						[then]
							{PROTECTION_FROM_POISON_APPLY refresh[$i]}
						[/then]
						[else]
							{CLEAR_VARIABLE refresh[$i].variables.unpoisonable_flag}
						[/else]
					[/if]
					{VARIABLE refresh_unstore_flag 1}
				[/then]
			[/if]
			# protection from slow
			[if]
				[variable]
					name=refresh[$i].variables.status.protection_from_slow
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP refresh[$i].variables.status.protection_from_slow sub 1}
					{CLEAR_SPELL_DISPLAY protection_from_slow (refresh[$i])}
					[if]
						[variable]
							name=refresh[$i].variables.status.protection_from_slow
							greater_than=0
						[/variable]
						[then]
							{PROTECTION_FROM_SLOW_APPLY refresh[$i]}
						[/then]
						[else]
							{CLEAR_VARIABLE refresh[$i].variables.unslowable_flag}
						[/else]
					[/if]
					{VARIABLE refresh_unstore_flag 1}
				[/then]
			[/if]
			# magic armor
			[if]
				[variable]
					name=refresh[$i].variables.status.protection_armor_magic
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP refresh[$i].variables.status.protection_armor_magic sub 1}
					{PROTECTION_ARMOR_MAGIC_APPLY refresh[$i]}
					{VARIABLE refresh_unstore_flag 1}
				[/then]
			[/if]
			# protection from fire
			[if]
				[variable]
					name=refresh[$i].variables.status.protection_from_fire
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP refresh[$i].variables.status.protection_from_fire sub 1}
					{PROTECTION_FROM_FIRE_APPLY refresh[$i]}
					{VARIABLE refresh_unstore_flag 1}
				[/then]
			[/if]
			# metal to drain
			[if]
				[variable]
					name=refresh[$i].variables.status.metal_to_drain
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP refresh[$i].variables.status.metal_to_drain sub 1}
					{METAL_TO_DRAIN_APPLY refresh[$i]}
					{VARIABLE refresh_unstore_flag 1}
				[/then]
			[/if]
			# unstore if needed
			[if]
				[variable]
					name=refresh_unstore_flag
					equals=1
				[/variable]
				[then]
					[unstore_unit]
						variable=refresh[$i]
					[/unstore_unit]
				[/then]
			[/if]
		[/do]
	[/for]
	{CLEAR_VARIABLE refresh}

	#NPCs to use potions
	[store_unit]
		[filter]
			side=$side_number
			[not]
				canrecruit=yes
			[/not]
		[/filter]
		variable=refresh
	[/store_unit]
	[for]
		array=refresh
		variable=i
		[do]
			[store_unit]
				[filter]
					x,y=$refresh[$i].x,$refresh[$i].y
				[/filter]
				variable=target_unit
			[/store_unit]
			[if]
				[variable]
					name=target_unit.variables.inventory.usables.length
					greater_than=0
				[/variable]
				[then]
					[for]
						array=target_unit.variables.inventory.usables
						variable=o
						reverse=yes
						[do]
							[if]
								[variable]
									name=target_unit.variables.inventory.usables[$o].command
									equals="potion_healing"
								[/variable]
								[then]
									{VARIABLE temp_npc_max_hp $refresh[$i].max_hitpoints}
									{VARIABLE_OP temp_npc_max_hp sub $refresh[$i].hitpoints}
									{VARIABLE temp_npc_half_hp $npc_temp.max_hitpoints}
									{VARIABLE_OP temp_npc_half_hp divide 2}
									[if]
										[variable]
											name=target_unit.variables.inventory.usables[$o].healing_number
											less_than_equal_to=$temp_npc_max_hp
										[/variable]
										[or]
											[variable]
												name=target_unit.status.poisoned
												equals=yes
											[/variable]
										[/or]
										[or]
											[variable]
												name=target_unit.hitpoints
												less_than_equal_to=$temp_npc_half_hp
											[/variable]
										[/or]
										[not]
											[variable]
												name=target_unit.variables.simple_action
												numerical_equals=0
											[/variable]
											[and]
												[variable]
													name=target_unit.attacks_left
													numerical_equals=0
												[/variable]
											[/and]
										[/not]
										[then]
											{VARIABLE healing_number $target_unit.variables.inventory.usables[$o].healing_number}
											[fire_event]
												name=healing_display
											[/fire_event]
											[sound]
												name=heal.wav
											[/sound]
											[if]
												[variable]
													name=target_unit.variables.simple_action
													greater_than_equal_to=1
												[/variable]
												[then]
													{VARIABLE_OP target_unit.variables.simple_action sub 1}
												[/then]
												[else]
													{VARIABLE_OP target_unit.attacks_left sub 1}
												[/else]
											[/if]
											{VARIABLE_OP target_unit.variables.inventory.usables[$o].uses sub 1}
											[if]
												[variable]
													name=target_unit.variables.inventory.usables[$o].uses
													less_than=1
												[/variable]
												[then]
													{CLEAR_VARIABLE target_unit.variables.inventory.usables[$o]}
												[/then]
											[/if]
											[unstore_unit]
												variable=target_unit
												text=$display_hp
												{COLOR_HEAL}
											[/unstore_unit]
										[/then]
									[/if]
								[/then]
							[/if]
						[/do]
					[/for]
				[/then]
			[/if]
		[/do]
	[/for]
	{CLEAR_VARIABLE target_unit,refresh,display_hp,temp_npc_max_hp,temp_npc_half_hp}

	#sneak
	[store_unit]
		[filter]
			side=$side_number
			ability=sneak
		[/filter]
		variable=sneak_refresh
	[/store_unit]
	[for]
		array=sneak_refresh
		variable=s
		[do]
			{VARIABLE sneak_refresh[$s].variables.stealthiness 1}
			[unstore_unit]
				variable=sneak_refresh[$s]
			[/unstore_unit]
		[/do]
	[/for]
	{CLEAR_VARIABLE sneak_refresh}
[/event]

# deal with consequences of loading a saved game or losing a player
[event]
	name=fix units

	{IF_VAR reload_marker equals 2 (
		[then]
			# restore units
			[kill]
				[not]
					canrecruit=yes
				[/not]
			[/kill]
			[for]
				array=bug_store
				variable=b
				[do]
					{VARIABLE bug_store[$b].moves $bug_store[$b].max_moves}
					{VARIABLE bug_store[$b].attacks_left 1}
					{VARIABLE bug_store[$b].variables.simple_action 1}
					{IF_VAR bug_store[$b].canrecruit equals yes (
						[then]
							[store_unit]
								[filter]
									side=$bug_store[$b].side
									canrecruit=yes
								[/filter]
								variable=leader_loc
							[/store_unit]
							[unstore_unit]
								variable=bug_store[$b]
								x,y=$leader_loc.x,$leader_loc.y
							[/unstore_unit]
							[modify_side]
								side=$bug_store[$b].side
								gold=$bug_store[$b].variables.personal_gold
							[/modify_side]
						[/then]
						[else]
							[unstore_unit]
								variable=bug_store[$b]
								x,y=recall,recall
							[/unstore_unit]
						[/else]
					)}
				[/do]
			[/for]
		[/then]
	)}
	{VARIABLE s 0}
	[while]
		[variable]
			name=s
			less_than=$const.max_player_count
		[/variable]
		[do]
			{VARIABLE_OP s add 1}
			[if]
				[have_unit]
					side=$s
					type=WBD Unknown Adventurer
				[/have_unit]
				[then]
					[modify_side]
						side=$s
						hidden=yes
					[/modify_side]
					[store_unit]
						[filter]
							side=$s
						[/filter]
						kill=yes
						variable=bug_store
					[/store_unit]
				[/then]
			[/if]
		[/do]
	[/while]
	{CLEAR_VARIABLE s,bug_store,leader_loc}
[/event]
[event]
	name=preload
	first_time_only=no

	#{VARIABLE make_4mp_leaders_quick no}
	#{VARIABLE show_turns_over_advantage no}
	{IF_VAR reload_marker not_equals 2 (
		[then]
			{VARIABLE_OP reload_marker add 1}
		[/then]
	)}
[/event]
