#level undead NPC
[event]
    name=post_advance
    first_time_only=no

    [filter]
        [filter_wml]
			[advancement]
				id=levelundead
			[/advancement]
		[/filter_wml]
    [/filter]
	
	[if]
		[variable]
			name=unit.zoc
			equals="no"
		[/variable]
		[then]
			{VARIABLE unit.zoc "yes"}
			#wesnoth does not currently support change of ellipse
			{VARIABLE unit.ellipse "misc/ellipse"}
		[/then]
	[/if]
	
	{VARIABLE_OP unit.level add 1}
	[unstore_unit]
		variable=unit
	[/unstore_unit]
[/event]

[event]
	name=npc_eval_weapon
	first_time_only=no
	[if]
		{ITEM_WIELDER}
		[then]
			{VARIABLE will_carry 1}
			{UPDATE_NPC_STATS}
            [set_variables]
                name=npc_temp.attack
                mode=append
                [value]
                    description=$$path|.description
                    icon=attacks/$$path|.icon|.png
                    name=$$path|.name
					user_name=$$path|.user_name
                    damage=$$path|.damage
                    number=$$path|.number
                    range=$$path|.range
                    type=$$path|.type
					is_rpg_weapon=1
                [/value]
            [/set_variables]
            #add damage/strikes based off of weapon stat bonuses
            {VARIABLE length_minus $npc_temp.attack.length}
            {VARIABLE_OP length_minus add -1}

			{VARIABLE final_att_damage_mod 0}
			{VARIABLE final_att_number_mod 0}
			[if]
				[variable]
					name=$path|.body_damage_rate
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP final_att_damage_mod add "$(($$path|.body_damage_rate)*($npc_temp.atts.body))"}
				[/then]
			[/if]
			[if]
				[variable]
					name=$path|.deft_damage_rate
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP final_att_damage_mod add "$(($$path|.deft_damage_rate)*($npc_temp.atts.deft))"}
				[/then]
			[/if]
			[if]
				[variable]
					name=$path|.mind_damage_rate
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP final_att_damage_mod add "$(($$path|.mind_damage_rate)*($npc_temp.atts.mind))"}
				[/then]
			[/if]
			{VARIABLE_OP final_att_damage_mod divide 80}
			[if]
				[variable]
					name=$path|.body_number_rate
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP final_att_number_mod add "$(($$path|.body_number_rate)*($npc_temp.atts.body))"}
				[/then]
			[/if]
			[if]
				[variable]
					name=$path|.deft_number_rate
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP final_att_number_mod add "$(($$path|.deft_number_rate)*($npc_temp.atts.deft))"}
				[/then]
			[/if]
			[if]
				[variable]
					name=$path|.mind_number_rate
					greater_than=0
				[/variable]
				[then]
					{VARIABLE_OP npc_temp.attack[$length_minus].number add "$(($$path|.mind_number_rate)*($npc_temp.atts.mind))"}
				[/then]
			[/if]
			{VARIABLE_OP final_att_number_mod divide 50}
			{VARIABLE_OP npc_temp.attack[$length_minus].damage add $final_att_damage_mod}
			{VARIABLE_OP npc_temp.attack[$length_minus].number add $final_att_number_mod}

			{VARIABLE percent_modifier 0}
			{VARIABLE_OP npc_temp.attack[$length_minus].number add $npc_temp.npc_race_adj.class.$$path|.class|.number_hard}
			{VARIABLE percent_modifier $npc_temp.npc_race_adj.class.$$path|.class|.damage_percent}
			{VARIABLE_OP percent_modifier add 100}
			{VARIABLE_OP npc_temp.attack[$length_minus].damage multiply $percent_modifier}
			{VARIABLE_OP npc_temp.attack[$length_minus].damage divide 100}
			{VARIABLE percent_modifier 0}
			{VARIABLE_OP npc_temp.attack[$length_minus].number add $npc_temp.npc_race_adj.name.$$path|.name|.number_hard}
			{VARIABLE percent_modifier $npc_temp.npc_race_adj.name.$$path|.name|.damage_percent}
			{VARIABLE_OP percent_modifier add 100}
			{VARIABLE_OP npc_temp.attack[$length_minus].damage multiply $percent_modifier}
			{VARIABLE_OP npc_temp.attack[$length_minus].damage divide 100}
			{VARIABLE percent_modifier 0}
			{VARIABLE_OP npc_temp.attack[$length_minus].number add $npc_temp.npc_race_adj.user_name.$$path|.user_name|.number_hard}
			{VARIABLE percent_modifier $npc_temp.npc_race_adj.user_name.$$path|.user_name|.damage_percent}
			{VARIABLE_OP percent_modifier add 100}
			{VARIABLE_OP npc_temp.attack[$length_minus].damage multiply $percent_modifier}
			{VARIABLE_OP npc_temp.attack[$length_minus].damage divide 100}
            #check to see if worse or not different enough from existing attacks
            #need to check for specials
            {VARIABLE length_minus $npc_temp.attack.length}
            {VARIABLE_OP length_minus add -1}
            {VARIABLE power_check $npc_temp.attack[$length_minus].damage}
            {VARIABLE_OP power_check multiply $npc_temp.attack[$length_minus].number}
			#npcs can't carry for now, until they can degrade
			[if]
				[variable]
					name=$path|.name
					equals="thunderstick"
				[/variable]
				[then]
					{VARIABLE will_carry 0}
				[/then]
				[else]
					[if]
						[variable]
							name=npc_temp.attack.length
							greater_than=0
						[/variable]
						[then]
							{FOREACH npc_temp.attack i}
								[if]
									[variable]
										name=npc_temp.attack[$i].range
										equals=$npc_temp.attack[$length_minus].range
									[/variable]
									[and]
										[variable]
											name=npc_temp.attack[$i].type
											equals=$npc_temp.attack[$length_minus].type
										[/variable]
									[/and]
									[and]
										[variable]
											name=i
											not_equals=$length_minus
										[/variable]
									[/and]
									[then]
										{VARIABLE power_check2 $npc_temp.attack[$i].damage}
										{VARIABLE_OP power_check2 multiply $npc_temp.attack[$i].number}
										[if]
											[variable]
												name=power_check2
												greater_than_equal_to=$power_check
											[/variable]
											[then]
												{VARIABLE will_carry 0}
											[/then]
											[else]
												[if]
													[variable]
														name=npc_temp.attack[$i].is_rpg_weapon
														greater_than=0
													[/variable]
													[then]
														{FOREACH npc_temp.variables.inventory.weapons.$npc_temp.attack[$i].range| o}
															[if]
																[variable]
																	name=npc_temp.variables.inventory.weapons.$npc_temp.attack[$i].range|[$o].type
																	equals=$npc_temp.attack[$i].type
																[/variable]
																[then]
																	[if]
																		[variable]
																			name=npc_temp.variables.inventory.weapons.$npc_temp.attack[$i].range|[$o].undropable
																			numerical_not_equals=1
																		[/variable]
																		[then]
																			{DROP_ITEM npc_temp.variables.inventory.weapons.$npc_temp.attack[$i].range|[$o] npc_temp.x npc_temp.y}
																		[/then]
																	[/if]
																	{CLEAR_VARIABLE npc_temp.variables.inventory.weapons.$npc_temp.attack[$i].range|[$o]}
																	{VARIABLE o npc_temp.variables.inventory.weapons.$npc_temp.attack[$i].range|.length}
																	{CLEAR_VARIABLE npc_temp.attack[$i]}
																	{VARIABLE_OP length_minus add -1}
																	{VARIABLE_OP i add -1}
																[/then]
															[/if]
														{NEXT o}
													[/then]
												[/if]
											[/else]
										[/if]
									[/then]
								[/if]
							{NEXT i}
						[/then]
					[/if]
				[/else]
			[/if]
		[/then]
		[else]
			{VARIABLE will_carry 0}
		[/else]
	[/if]
	[if]
		[variable]
			name=will_carry
			numerical_equals=1
		[/variable]
		[then]
			[set_variables]
				name=npc_temp.variables.inventory.weapons.$$path|.range
				mode=append
				to_variable=$path
			[/set_variables]
			[unstore_unit]
                variable=npc_temp
                find_vacant=no
            [/unstore_unit]
			{CHANGE_BASE_SKEL_SPRITE npc_temp}
		[/then]
		[else]
			{CLEAR_VARIABLE npc_temp}
		[/else]
	[/if]
[/event]

[event]
	name=npc_eval_armor
	first_time_only=no
	[if]
		{ITEM_WIELDER}
		[then]
			{VARIABLE will_carry 1}
			[switch]
				variable=$path|.category
				[case]
					value="torso_armor"
					{VARIABLE rate_arcane "1"}
					{VARIABLE rate_blade "0.5"}
					{VARIABLE rate_fire "1"}
					{VARIABLE rate_cold "1"}
					{VARIABLE rate_impact "0.25"}
					{VARIABLE rate_pierce "0.5"}
					{VARIABLE evade_for_elusive "-5"}
					{VARIABLE old_path "npc_temp.variables.inventory.armor.torso"}
				[/case]
				[case]
					value="legs_armor"
					{VARIABLE rate_arcane "1"}
					{VARIABLE rate_blade "0.34"}
					{VARIABLE rate_fire "1"}
					{VARIABLE rate_cold "1"}
					{VARIABLE rate_impact "0.25"}
					{VARIABLE rate_pierce "0.5"}
					{VARIABLE evade_for_elusive "-3"}
					{VARIABLE old_path "npc_temp.variables.inventory.armor.legs"}
				[/case]
				[case]
					value="head_armor"
					{VARIABLE rate_arcane "1"}
					{VARIABLE rate_blade "0.16"}
					{VARIABLE rate_fire "1"}
					{VARIABLE rate_cold "1"}
					{VARIABLE rate_impact "0.5"}
					{VARIABLE rate_pierce "0"}
					{VARIABLE evade_for_elusive "-2"}
					{VARIABLE old_path "npc_temp.variables.inventory.armor.head"}
				[/case]
				[else]
					#temporary exclusion of shields, or any item that npc doesn't know how to handle
					{VARIABLE will_carry 0}
				[/else]
			[/switch]
			#is it better than current armor?
			{VARIABLE npc_armor_abs_prot $$path|.resistance.arcane}
			{VARIABLE_OP npc_armor_abs_prot add $$path|.resistance.blade}
			{VARIABLE_OP npc_armor_abs_prot add $$path|.resistance.fire}
			{VARIABLE_OP npc_armor_abs_prot add $$path|.resistance.cold}
			{VARIABLE_OP npc_armor_abs_prot add $$path|.resistance.impact}
			{VARIABLE_OP npc_armor_abs_prot add $$path|.resistance.pierce}
			{VARIABLE npc_current_armor_abs_prot 0}
			[if]
				#were we already wearing armor of that type?
				[variable]
					name=$old_path|.category
					equals=$$path|.category
				[/variable]
				[then]
					{VARIABLE npc_current_armor_abs_prot $$old_path|.resistance.arcane}
					{VARIABLE_OP npc_current_armor_abs_prot add $$old_path|.resistance.blade}
					{VARIABLE_OP npc_current_armor_abs_prot add $$old_path|.resistance.fire}
					{VARIABLE_OP npc_current_armor_abs_prot add $$old_path|.resistance.cold}
					{VARIABLE_OP npc_current_armor_abs_prot add $$old_path|.resistance.impact}
					{VARIABLE_OP npc_current_armor_abs_prot add $$old_path|.resistance.pierce}
				[/then]
				[else]
					{VARIABLE npc_current_armor_abs_prot 0}
				[/else]
			[/if]				
			[if]
				[variable]
					name=npc_current_armor_abs_prot
					greater_than=$npc_armor_abs_prot
				[/variable]
				[then]
					{VARIABLE will_carry 0}
				[/then]
			[/if]
		[/then]
		[else]
			{VARIABLE will_carry 0}
		[/else]
	[/if]
    #temp exclusion of robes
	[if]
		[variable]
			name=$path|.name
			equals="mage_robe"
		[/variable]
		[then]
			{VARIABLE will_carry 0}
		[/then]
	[/if]
	[if]
        [variable]
            name=will_carry
            numerical_equals=1
        [/variable]
        [then]
			{MODRPG_NPC_FIND_ARMOR_RES_DIFF "arcane" "$rate_arcane"}
			{MODRPG_NPC_FIND_ARMOR_RES_DIFF "blade" "$rate_blade"}
			{MODRPG_NPC_FIND_ARMOR_RES_DIFF "fire" "$rate_fire"}
			{MODRPG_NPC_FIND_ARMOR_RES_DIFF "cold" "$rate_cold"}
			{MODRPG_NPC_FIND_ARMOR_RES_DIFF "impact" "$rate_impact"}
			{MODRPG_NPC_FIND_ARMOR_RES_DIFF "pierce" "$rate_pierce"}
			{MODRPG_NPC_HANDLE_ARMOR "$$path|.category|" "$evade_for_elusive"}
		[/then]
	[/if]
	[if]
        [variable]
            name=will_carry
            numerical_equals=1
        [/variable]
        [then]
			#check if has an armor piece
			{FOREACH npc_temp.abilities.dummy i}
				[if]
					[variable]
						name=npc_temp.abilities.dummy[$i].id
						equals="npc_armor_display"
					[/variable]
					[then]
						{CLEAR_VARIABLE npc_temp.abilities.dummy[$i]}
						{VARIABLE i $npc_temp.abilities.dummy.length}
					[/then]
				[/if]
			{NEXT i}
			{VARIABLE npc_temp_ability_arcane_display 0}
			{VARIABLE npc_temp_ability_blade_display 0}
			{VARIABLE npc_temp_ability_fire_display 0}
			{VARIABLE npc_temp_ability_cold_display 0}
			{VARIABLE npc_temp_ability_impact_display 0}
			{VARIABLE npc_temp_ability_pierce_display 0}
			{FOREACH npc_temp.abilities.resistance i}
				{MODRPG_NPC_UNIT_CALCULATE_RES_DISPLAY "arcane"}
				{MODRPG_NPC_UNIT_CALCULATE_RES_DISPLAY "blade"}
				{MODRPG_NPC_UNIT_CALCULATE_RES_DISPLAY "fire"}
				{MODRPG_NPC_UNIT_CALCULATE_RES_DISPLAY "cold"}
				{MODRPG_NPC_UNIT_CALCULATE_RES_DISPLAY "impact"}
				{MODRPG_NPC_UNIT_CALCULATE_RES_DISPLAY "pierce"}
			{NEXT i}
			{VARIABLE npc_display_base_res_arcane $npc_temp.resistance.arcane}
			{VARIABLE_OP npc_display_base_res_arcane add -100}
			{VARIABLE_OP npc_display_base_res_arcane multiply -1}
			{VARIABLE npc_display_adjusted_res_arcane $npc_display_base_res_arcane}
			{VARIABLE_OP npc_display_adjusted_res_arcane add $npc_temp_ability_arcane_display}
			
			{VARIABLE npc_display_base_res_blade $npc_temp.resistance.blade}
			{VARIABLE_OP npc_display_base_res_blade add -100}
			{VARIABLE_OP npc_display_base_res_blade multiply -1}
			{VARIABLE npc_display_adjusted_res_blade $npc_display_base_res_blade}
			{VARIABLE_OP npc_display_adjusted_res_blade add $npc_temp_ability_blade_display}
					
			{VARIABLE npc_display_base_res_fire $npc_temp.resistance.fire}
			{VARIABLE_OP npc_display_base_res_fire add -100}
			{VARIABLE_OP npc_display_base_res_fire multiply -1}
			{VARIABLE npc_display_adjusted_res_fire $npc_display_base_res_fire}
			{VARIABLE_OP npc_display_adjusted_res_fire add $npc_temp_ability_fire_display}
					
			{VARIABLE npc_display_base_res_cold $npc_temp.resistance.cold}
			{VARIABLE_OP npc_display_base_res_cold add -100}
			{VARIABLE_OP npc_display_base_res_cold multiply -1}
			{VARIABLE npc_display_adjusted_res_cold $npc_display_base_res_cold}
			{VARIABLE_OP npc_display_adjusted_res_cold add $npc_temp_ability_cold_display}
					
			{VARIABLE npc_display_base_res_impact $npc_temp.resistance.impact}
			{VARIABLE_OP npc_display_base_res_impact add -100}
			{VARIABLE_OP npc_display_base_res_impact multiply -1}
			{VARIABLE npc_display_adjusted_res_impact $npc_display_base_res_impact}
			{VARIABLE_OP npc_display_adjusted_res_impact add $npc_temp_ability_impact_display}
					
			{VARIABLE npc_display_base_res_pierce $npc_temp.resistance.pierce}
			{VARIABLE_OP npc_display_base_res_pierce add -100}
			{VARIABLE_OP npc_display_base_res_pierce multiply -1}
			{VARIABLE npc_display_adjusted_res_pierce $npc_display_base_res_pierce}
			{VARIABLE_OP npc_display_adjusted_res_pierce add $npc_temp_ability_pierce_display}
					
			#drop old armor if redundant
			[if]
				[variable]
					name=npc_current_armor_abs_prot
					greater_than=0
				[/variable]
				[then]
					[item]
						x=$npc_temp.x
						y=$npc_temp.y
						image=items/$$old_path|.ground_icon|.png
						visible_in_fog=no
					[/item]
					[set_variables]
						name=ground_$npc_temp.x|_$npc_temp.y|.items
						mode=append
						[insert_tag]
							name=literal
							variable=$old_path
						[/insert_tag]
					[/set_variables]
				[/then]
			[/if]
			[set_variables]
				name=$old_path
				mode=replace
				to_variable=$path
			[/set_variables]
			#add display ability
			[set_variables]
				name=npc_temp.abilities.dummy
				mode=append
				[value]
					id=npc_armor_display
					name="armor"
					description="This unit's armor gives it some special resistances. Below are the base values with the adjusted values in parentheses.
Arcane: $npc_display_base_res_arcane ($npc_display_adjusted_res_arcane)
Blade: $npc_display_base_res_blade ($npc_display_adjusted_res_blade)
Fire: $npc_display_base_res_fire ($npc_display_adjusted_res_fire)
Cold: $npc_display_base_res_cold ($npc_display_adjusted_res_cold)
Impact: $npc_display_base_res_impact ($npc_display_adjusted_res_impact)
Pierce: $npc_display_base_res_pierce ($npc_display_adjusted_res_pierce)"
				[/value]
			[/set_variables]
			[unstore_unit]
                variable=npc_temp
                find_vacant=no
            [/unstore_unit]
		[/then]
		[else]
			{CLEAR_VARIABLE npc_temp}
		[/else]
	[/if]
[/event]

[event]
	name=npc_eval_shield
	first_time_only=no
	[if]
		{ITEM_WIELDER}
		[then]
			{VARIABLE will_carry 1}
			{VARIABLE old_path "npc_temp.variables.inventory.armor.shield"}
			[if]
				[variable]
					name=npc_temp.variables.terrain.flat.defense
					greater_than=0
				[/variable]
				[then]
				[/then]
				[else]
					{VARIABLE npc_temp.variables.terrain.unwalkable.defense $npc_temp.defense.unwalkable}
					{VARIABLE npc_temp.variables.terrain.castle.defense $npc_temp.defense.castle}
					{VARIABLE npc_temp.variables.terrain.village.defense $npc_temp.defense.village}
					{VARIABLE npc_temp.variables.terrain.shallow_water.defense $npc_temp.defense.shallow_water}
					{VARIABLE npc_temp.variables.terrain.deep_water.defense $npc_temp.defense.deep_water}
					{VARIABLE npc_temp.variables.terrain.flat.defense $npc_temp.defense.flat}
					{VARIABLE npc_temp.variables.terrain.forest.defense $npc_temp.defense.forest}
					{VARIABLE npc_temp.variables.terrain.hills.defense $npc_temp.defense.hills}
					{VARIABLE npc_temp.variables.terrain.mountains.defense $npc_temp.defense.mountains}
					{VARIABLE npc_temp.variables.terrain.swamp_water.defense $npc_temp.defense.swamp_water}
					{VARIABLE npc_temp.variables.terrain.sand.defense $npc_temp.defense.sand}
					{VARIABLE npc_temp.variables.terrain.cave.defense $npc_temp.defense.cave}
					{VARIABLE npc_temp.variables.terrain.reef.defense $npc_temp.defense.reef}
					{VARIABLE npc_temp.variables.terrain.impassable.defense $npc_temp.defense.impassable}
					{VARIABLE npc_temp.variables.terrain.frozen.defense $npc_temp.defense.frozen}
					{VARIABLE npc_temp.variables.terrain.fungus.defense $npc_temp.defense.fungus}
				[/else]
			[/if]
			#is it better than current armor?
			[if]
				[variable]
					name=$old_path|.terrain_recoup
					greater_than=$$path|.terrain_recoup
				[/variable]
				[or]
					[variable]
						name=npc_temp.variables.terrain.flat.defense
						less_than_equal_to=$npc_variables.base_race_def.$npc_temp.race|.flat
					[/variable]
				[/or]
				[then]
					{VARIABLE will_carry 0}
				[/then]
			[/if]
		[/then]
		[else]
			{VARIABLE will_carry 0}
		[/else]
	[/if]
	[if]
        [variable]
            name=will_carry
            numerical_equals=1
        [/variable]
        [then]
			#only effects terrain effected by armor
			{MODRPG_NPC_FIND_SHIELD_DEF_DIFF "unwalkable"}
			{MODRPG_NPC_FIND_SHIELD_DEF_DIFF "shallow_water"}
			{MODRPG_NPC_FIND_SHIELD_DEF_DIFF "deep_water"}
			{MODRPG_NPC_FIND_SHIELD_DEF_DIFF "flat"}
			{MODRPG_NPC_FIND_SHIELD_DEF_DIFF "forest"}
			{MODRPG_NPC_FIND_SHIELD_DEF_DIFF "hills"}
			{MODRPG_NPC_FIND_SHIELD_DEF_DIFF "swamp_water"}
			{MODRPG_NPC_FIND_SHIELD_DEF_DIFF "frozen"}
			{MODRPG_NPC_FIND_SHIELD_DEF_DIFF "fungus"}
					
			#drop old armor if redundant
			[if]
				[variable]
					name=$old_path|.terrain_recoup
					greater_than=0
				[/variable]
				[then]
					[item]
						x=$npc_temp.x
						y=$npc_temp.y
						image=items/$$old_path|.ground_icon|.png
						visible_in_fog=no
					[/item]
					[set_variables]
						name=ground_$npc_temp.x|_$npc_temp.y|.items
						mode=append
						[insert_tag]
							name=literal
							variable=$old_path
						[/insert_tag]
					[/set_variables]
				[/then]
			[/if]
			#?
			[set_variables]
				name=$old_path
				mode=replace
				to_variable=$path
			[/set_variables]
			#add display ability
			[set_variables]
				name=npc_temp.abilities.dummy
				mode=append
				[value]
					id=npc_shield_display
					name="shield"
					description="This unit has a shield that gives it up to $$path|.terrain_recoup defense bonus on some terrain."
				[/value]
			[/set_variables]
			[unstore_unit]
                variable=npc_temp
                find_vacant=no
            [/unstore_unit]
		[/then]
		[else]
			{CLEAR_VARIABLE npc_temp}
		[/else]
	[/if]
[/event]

[event]
	name=npc_eval_usable
	first_time_only=no

	[if]
		[variable]
			name=$path|.command
			equals="potion_healing"
		[/variable]
		[and]
			{ITEM_WIELDER}
		[/and]
		[then]
			{VARIABLE will_carry 1}
			{VARIABLE temp_npc_max_hp $npc_temp.max_hitpoints}
			{VARIABLE_OP temp_npc_max_hp add -$npc_temp.hitpoints}
			{VARIABLE temp_npc_half_hp $npc_temp.max_hitpoints}
			{VARIABLE_OP temp_npc_half_hp divide 2}
			[if]
				[variable]
					name=$path|.healing_number
					less_than_equal_to=$temp_npc_max_hp
				[/variable]
				[or]
					[variable]
						name=npc_temp.status.poisoned
						equals=yes
					[/variable]
				[/or]
				[or]
					[variable]
						name=npc_temp.hitpoints
						less_than_equal_to=$temp_npc_half_hp
					[/variable]
				[/or]
				[not]
					[variable]
						name=npc_temp.simple_action
						numerical_equals=0
					[/variable]
					[and]
						[variable]
							name=npc_temp.attacks_left
							numerical_equals=0
						[/variable]
					[/and]
				[/not]
				[then]
					{VARIABLE target_x $npc_temp.x}
		            {VARIABLE target_y $npc_temp.y}
					[unstore_unit]
						variable=npc_temp
					[/unstore_unit]
					[store_unit]
						[filter]
							x,y=$target_x,$target_y
						[/filter]
						variable=target_unit 
					[/store_unit]
					{VARIABLE healing_number $$path|.healing_number}
					[fire_event]
						name=healing_display
					[/fire_event]
					[unstore_unit]
						variable=target_unit
						text=$display_hp
						{COLOR_HEAL}
					[/unstore_unit]
					[store_unit]
						[filter]
							x,y=$target_x,$target_y
						[/filter]
						variable=npc_temp
					[/store_unit]
					{EXPEND_SIMPLE_ACTION npc_temp}
					{VARIABLE_OP $path|.uses add -1}
				[/then]
			[/if]
			[if]
				[variable]
					name=$path|.uses
					greater_than=0
				[/variable]
				[then]											
					[set_variables]
						name=npc_temp.variables.inventory.usables
						mode=append
						to_variable=$path
					[/set_variables]
				[/then]
			[/if]
			[unstore_unit]
                variable=npc_temp
                find_vacant=no
            [/unstore_unit]
		[/then]
		[else]
			{VARIABLE will_carry 0}
			{CLEAR_VARIABLE npc_temp}
		[/else]
	[/if]
[/event]

[event]
	name=npc_eval_gold
	first_time_only=no
	
	[if]
		{LIKES_GOLD}
		[then]
			{VARIABLE will_carry 1}
			{VARIABLE_OP npc_temp.personal_gold add $$path|.amount}
			[sound]
			    name=gold.ogg
			[/sound]
			[unstore_unit]
                variable=npc_temp
                find_vacant=no
            [/unstore_unit]
		[/then]
		[else]
			{VARIABLE will_carry 0}
			{CLEAR_VARIABLE npc_temp}
		[/else]
	[/if]
[/event]

[event]
	name=eval_npc
	first_time_only=no
	[switch]
		variable=$path|.category
		[case]
			value="melee_weapon"
			[fire_event]
				name=npc_eval_weapon
			[/fire_event]
		[/case]
		[case]
			value="ranged_weapon"
			[fire_event]
				name=npc_eval_weapon
			[/fire_event]
		[/case]
		[case]
			value="usables"
			[fire_event]
				name=npc_eval_usable
			[/fire_event]
		[/case]
		[case]
			value="gold"
			[fire_event]
				name=npc_eval_gold
			[/fire_event]
		[/case]
		[case]
			value="shield"
			[fire_event]
				name=npc_eval_shield
			[/fire_event]
		[/case]
		[else]
			[fire_event]
				name=npc_eval_armor
			[/fire_event]
		[/else]
	[/switch]
	#{CHANGE_BASE_SKEL_SPRITE}
[/event]