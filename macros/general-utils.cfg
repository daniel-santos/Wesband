#utility macros

#define NULL
#enddef
#define NULL_1 A
#enddef

#define FIND_DISTANCE X1 Y1 X2 Y2
    [store_locations]
        x={X1}
        y={Y1}
        variable=target_location
    [/store_locations]
    {VARIABLE radius_temp 0}
    {VARIABLE out_loop 1}
    [while]
        [variable]
            name=out_loop
            numerical_equals=1
        [/variable]
        [do]
            {VARIABLE_OP radius_temp add 1}
            [store_locations]
                x={X2}
                y={Y2}
                radius=$radius_temp
                variable=temp_location
            [/store_locations]
            {FOREACH temp_location i}
                [if]
                    [variable]
                        name=temp_location[$i].x
                        numerical_equals=$target_location.x
                    [/variable]
                    [and]
                        [variable]
                            name=temp_location[$i].y
                            numerical_equals=$target_location.y
                        [/variable]
                    [/and]
                    [then]
                        {VARIABLE out_loop 0}
                    [/then]
                [/if]
            {NEXT i}
        [/do]
    [/while]
    {VARIABLE distance $radius_temp}
#enddef

#define CHECK_PREREQ PREREQ NUM
    [show_if]
        [variable]
            name=current_unit.{PREREQ}
            greater_than_equal_to={NUM}
        [/variable]
    [/show_if]
#enddef

#define CHECK_PREREQ_2 PREREQ NUM PREREQ2 NUM2
    [show_if]
        [variable]
            name=current_unit.{PREREQ}
            greater_than_equal_to={NUM}
        [/variable]
        [and]
            [variable]
                name=current_unit.{PREREQ2}
                greater_than_equal_to={NUM2}
            [/variable]
        [/and]
    [/show_if]
#enddef

#define CHECK_PREREQ_3 PREREQ NUM PREREQ2 NUM2 PREREQ3 NUM3
    [show_if]
        [variable]
            name=current_unit.{PREREQ}
            greater_than_equal_to={NUM}
        [/variable]
        [and]
            [variable]
                name=current_unit.{PREREQ2}
                greater_than_equal_to={NUM2}
            [/variable]
            [and]
                [variable]
                    name=current_unit.{PREREQ3}
                    greater_than_equal_to={NUM3}
                [/variable]
            [/and]
        [/and]
    [/show_if]
#enddef

#define UPGRADE_TRIVIAL DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name=current_unit.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 3}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost $current_unit.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 2}
            {VARIABLE_OP {COST_HOLDER}_cost add 3}
        [/else]
    [/if]
#enddef

#define UPGRADE_EASY DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name=current_unit.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 1}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost $current_unit.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 3}
            {VARIABLE_OP {COST_HOLDER}_cost add 1}
        [/else]
    [/if]
#enddef

#define UPGRADE_MEDIUM DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name=current_unit.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 2}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost $current_unit.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 3}
            {VARIABLE_OP {COST_HOLDER}_cost add 2}
        [/else]
    [/if]
#enddef

#define UPGRADE_HARD DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name=current_unit.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 3}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost $current_unit.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 3}
            {VARIABLE_OP {COST_HOLDER}_cost add 3}
        [/else]
    [/if]
#enddef

#define UPGRADE_SUPERHARD DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name=current_unit.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 4}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost $current_unit.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 4}
            {VARIABLE_OP {COST_HOLDER}_cost add 4}
        [/else]
    [/if]
#enddef

#define UPGRADE_EASY_WEAPON DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost $current_unit.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 5}
    {VARIABLE_OP {COST_HOLDER}_cost add 3}
#enddef

#define UPGRADE_MEDIUM_WEAPON DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost $current_unit.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 5}
    {VARIABLE_OP {COST_HOLDER}_cost add 4}
#enddef

#define UPGRADE_HARD_WEAPON DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost $current_unit.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 5}
    {VARIABLE_OP {COST_HOLDER}_cost add 5}
#enddef

#define UPGRADE_EASY_WEAPON_NUMBER DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost $current_unit.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 7}
    {VARIABLE_OP {COST_HOLDER}_cost add 3}
#enddef

#define UPGRADE_MEDIUM_WEAPON_NUMBER DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost $current_unit.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 7}
    {VARIABLE_OP {COST_HOLDER}_cost add 4}
#enddef

#define UPGRADE_HARD_WEAPON_NUMBER DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost $current_unit.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 7}
    {VARIABLE_OP {COST_HOLDER}_cost add 5}
#enddef

#define UPGRADE_SUPERHARD_WEAPON DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name=current_unit.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 6}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost $current_unit.variables.weapon_skills.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 6}
            {VARIABLE_OP {COST_HOLDER}_cost add 6}
        [/else]
    [/if]
#enddef

#define FOREACH_COLLAPSE ARRAY VAR
    [set_variable]
        name={VAR}
        value="${ARRAY}.length"
    [/set_variable]
    [set_variable]
        name={VAR}
        add=-1
    [/set_variable]
    [while]
        [variable]
            name={VAR}
            greater_than=-1
        [/variable]
        [do]
#enddef

#define NEXT_COLLAPSE VAR
    [set_variable]
        name={VAR}
        add=-1
    [/set_variable]
[/do]
[/while]
{CLEAR_VARIABLE {VAR}}
#enddef

#define MOV_TERRAIN_CHECKER LOCATION_X LOCATION_Y TERRAIN LETTERS PATH
    [if]
        [have_location]
            x,y=${LOCATION_X},${LOCATION_Y}
            terrain={LETTERS}
        [/have_location]
        [then]
            {VARIABLE movement_cost ${PATH}.movement_costs.{TERRAIN}}
        [/then]
    [/if]
#enddef

#define MOV_TERRAIN_CHECKER_2 LOCATION_X LOCATION_Y TERRAIN_1 TERRAIN_2 LETTERS PATH
    [if]
        [have_location]
            x,y=${LOCATION_X},${LOCATION_Y}
            terrain={LETTERS}
        [/have_location]
        [then]
            [if]
                [variable]
                    name={PATH}.movement_costs.{TERRAIN_1}
                    less_than_equal_to=${PATH}.movement_costs.{TERRAIN_2}
                [/variable]
                [then]
                    {VARIABLE movement_cost ${PATH}.movement_costs.{TERRAIN_1}}
                [/then]
                [else]
                    {VARIABLE movement_cost ${PATH}.movement_costs.{TERRAIN_2}}
                [/else]
            [/if]
        [/then]
    [/if]
#enddef

#define MOVEMENT_CALCULATOR LOCATION_X LOCATION_Y PATH
    # Basic Terrain
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} deep_water "Wo" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} shallow_water "Ww,Ww^Vm" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} swamp_water "Ss,Ss^Vm" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} flat "Gg,Ggf,Gs,Rd,Re,Rr,Rp,Re^Gvs,Gg^Wm,Uu^Vdo,Uu^Vuo,Rys,Ryf,Ryc,Ryv" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} sand "Dd,Ds,Dd^Dc" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} forest "Gg^Fet,Gs^Fp,Gs^Ft" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} hills "Dd^Dr,Hh" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} mountains "Md,Mm" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} village "Aa^Vea,Gg^Ve,Aa^Vha,Gg^Vh,Gs^Vht,Rp^Vho,Gg^Veo,Gg^Vo" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} castle "Ce,Ch,Cv,Cud,Chr,Ke,Kh,Kv,Kud,Khr" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} cave "Uu,Uu^Ii" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} frozen "Ai,Aa" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} unwalkable "Qxu,Ql,Qlf" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} impassable "Mm^Xm,Md^Xm,Xu,Xv" {PATH}}
    {MOV_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} fungus "Uu^Uf,Re^Uf" {PATH}}

    # Bridges
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} deep_water grassland "Wo^Bw|,Wo^Bw/,Wo^Bw\" {PATH}}
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} shallow_water grassland "Ww^Bw\,Ww^Bw|,Ww^Bw/" {PATH}}
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} swamp_water grassland "Ss^Bw\,Ss^Bw|,Ss^Bw/" {PATH}}

    # Castles
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} shallow_water castle "Chw,Khw" {PATH}}
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} swamp_water castle "Chs,Khs" {PATH}}

    # Villages
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} swamp_water village "Ss^Vhs" {PATH}}
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} cave village "Uu^Vu,Uu^Vud" {PATH}}
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} hills village "Hh^Vhh,Ha^Vhha" {PATH}}
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} mountains village "Mm^Vhh" {PATH}}

    # Hills - cave,sand,snow
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} cave hills "Uh,Uh^Ii" {PATH}}
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} sand hills "Hd" {PATH}}
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} tundra hills "Ha" {PATH}}

    # River-ford
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} flat shallow_water "Wwf" {PATH}}

    # Snow-forest
    {MOV_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} frozen forest "Aa^Fpa" {PATH}}
#enddef

#define DEF_TERRAIN_CHECKER LOCATION_X LOCATION_Y TERRAIN LETTERS PATH
    [if]
        [have_location]
            x,y=${LOCATION_X},${LOCATION_Y}
            terrain={LETTERS}
        [/have_location]
        [then]
            {VARIABLE defense ${PATH}.defense.{TERRAIN}}
        [/then]
    [/if]
#enddef

#define DEF_TERRAIN_CHECKER_2 LOCATION_X LOCATION_Y TERRAIN_1 TERRAIN_2 LETTERS PATH
    [if]
        [have_location]
            x,y=${LOCATION_X},${LOCATION_Y}
            terrain={LETTERS}
        [/have_location]
        [then]
            [if]
                [variable]
                    name={PATH}.defense.{TERRAIN_1}
                    less_than_equal_to=${PATH}.defense.{TERRAIN_2}
                [/variable]
                [then]
                    {VARIABLE defense ${PATH}.defense.{TERRAIN_1}}
                [/then]
                [else]
                    {VARIABLE defense ${PATH}.defense.{TERRAIN_2}}
                [/else]
            [/if]
        [/then]
    [/if]
#enddef

#define DEFENSE_CALCULATOR LOCATION_X LOCATION_Y PATH
    # Basic Terrain
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} deep_water "Wo" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} shallow_water "Ww,Ww^Vm" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} swamp_water "Ss,Ss^Vm" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} flat "Gg,Ggf,Gs,Rd,Re,Rr,Rp,Re^Gvs,Gg^Wm,Uu^Vdo,Uu^Vuo,Rys,Ryf,Ryc,Ryv" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} sand "Dd,Ds,Dd^Dc" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} forest "Gg^Fet,Gs^Fp,Gs^Ft" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} hills "Dd^Dr,Hh" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} mountains "Md,Mm" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} village "Aa^Vea,Gg^Ve,Aa^Vha,Gg^Vh,Gs^Vht,Rp^Vho,Gg^Veo,Gg^Vo" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} castle "Ce,Ch,Cv,Cud,Chr,Ke,Kh,Kv,Kud,Khr" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} cave "Uu,Uu^Ii" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} frozen "Ai,Aa" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} unwalkable "Qxu,Ql,Qlf" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} impassable "Mm^Xm,Md^Xm,Xu,Xv" {PATH}}
    {DEF_TERRAIN_CHECKER {LOCATION_X} {LOCATION_Y} fungus "Uu^Uf,Re^Uf" {PATH}}

    # Bridges
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} deep_water grassland "Wo^Bw|,Wo^Bw/,Wo^Bw\" {PATH}}
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} shallow_water grassland "Ww^Bw\,Ww^Bw|,Ww^Bw/" {PATH}}
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} swamp_water grassland "Ss^Bw\,Ss^Bw|,Ss^Bw/" {PATH}}

    # Castles
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} shallow_water castle "Chw,Khw" {PATH}}
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} swamp_water castle "Chs,Khs" {PATH}}

    # Villages
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} swamp_water village "Ss^Vhs" {PATH}}
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} cave village "Uu^Vu,Uu^Vud" {PATH}}
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} hills village "Hh^Vhh,Ha^Vhha" {PATH}}
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} mountains village "Mm^Vhh" {PATH}}

    # Hills - cave,sand,snow
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} cave hills "Uh,Uh^Ii" {PATH}}
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} sand hills "Hd" {PATH}}
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} tundra hills "Ha" {PATH}}

    # River-ford
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} flat shallow_water "Wwf" {PATH}}

    # Snow-forest
    {DEF_TERRAIN_CHECKER_2 {LOCATION_X} {LOCATION_Y} frozen forest "Aa^Fpa" {PATH}}
#enddef

#define CONSTRUCT_UNIT
    [fire_event]
        name=construct_unit
    [/fire_event]
#enddef 