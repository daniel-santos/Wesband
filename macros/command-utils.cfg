#define DISPLAY_TORSO_ARMOR PATH
    image=${PATH}.icon|.png
    label=_ "${PATH}.description|
<small><small>${PATH}.resistance.arcane|% arcane, ${PATH}.resistance.blade|% blade, ${PATH}.resistance.fire|% fire, ${PATH}.resistance.cold|% cold, ${PATH}.resistance.impact|% impact, ${PATH}.resistance.pierce|% pierce
${PATH}.magic_adjust|% magic adj, ${PATH}.evade_adjust| evade adj, -${PATH}.terrain.flat.defense|% def adj</small></small>"#enddef

#define DISPLAY_HEAD_ARMOR PATH
    image=${PATH}.icon|.png
    label=_ "${PATH}.description|
<small><small>${PATH}.resistance.arcane|% arcane, ${PATH}.resistance.blade|% blade, ${PATH}.resistance.fire|% fire, ${PATH}.resistance.cold|% cold, ${PATH}.resistance.impact|% impact, ${PATH}.resistance.pierce|% pierce
$(if(null(${PATH}.magic_adjust|), '', ${PATH}.magic_adjust| != 0, concatenate('+', ${PATH}.magic_adjust|,'% magic adj, ', '')))${PATH}.evade_adjust| evade adj, ${PATH}.ranged_adjust|% ranged adj</small></small>"#enddef

#define DISPLAY_LEGS_ARMOR PATH
    image=${PATH}.icon|.png
    label=_ "${PATH}.description|
<small><small>${PATH}.resistance.arcane|% arcane, ${PATH}.resistance.blade|% blade, ${PATH}.resistance.fire|% fire, ${PATH}.resistance.cold|% cold, ${PATH}.resistance.impact|% impact, ${PATH}.resistance.pierce|% pierce
${PATH}.magic_adjust|% magic adj, ${PATH}.evade_adjust| evade adj, -${PATH}.terrain.flat.defense|% def adj</small></small>"#enddef

#define DISPLAY_SHIELD PATH
    image=${PATH}.icon|.png
    label=_ "${PATH}.description|
<small><small>${PATH}.evade_adjust| evade adjust, ${PATH}.terrain_recoup| terrain adjust, ${PATH}.ranged_adjust|% ranged adj, ${PATH}.magic_adjust|% magic adj
${PATH}.special</small></small>"#enddef

#define DISPLAY_WEAPON PATH
    image=attacks/${PATH}.icon|.png
    label=_ "${PATH}.description|
<small><small>Class: ${PATH}.class_description|${PATH}.evade_description|</small></small>
<small>Base: (${PATH}.damage|-${PATH}.number|), Adjusted: ($display_damage|-$display_number|) ${PATH}.type|
<small>$(if(${PATH}.magic_adjust| != 0, concatenate('+', ${PATH}.magic_adjust|,'% magic adj, ', '')))${PATH}.special|</small></small>"#enddef

#define MODRPG_COMMAND_LEVELUP
    [set_menu_item]
        id=b_levelup
        image=commands/button_up.png
        description=_ "Upgrade"
        [filter_location]
            x,y=$x1,$y1
            [filter]
                side=$side_number
                canrecruit=yes
            [/filter]
        [/filter_location]

        [command]
            {LEVELUP_MENU}
        [/command]
    [/set_menu_item]
    [event]
        name=scenario_end
        [clear_menu_item]
            id=b_levelup
        [/clear_menu_item]
    [/event]
#enddef


#define MODRPG_FIND_USEABLES CMD ARRAY_PATH NOT_DONE
    {FIND_DISTANCE ${CMD}.target.x| ${CMD}.target.y| ${CMD}.unit.x| ${CMD}.unit.y|}
    [foreach]
        array={CMD}.unit.{ARRAY_PATH}
        variable=spell
        index_var=i
        readonly=yes
        [do]
            {VARIABLE {CMD}.range_max $spell.range_max}
            [if]
                [not]
                    [variable]
                        name=$spell.max_range_multiply_by
                        equals=""
                    [/variable]
                [/not]
                [then]
                    {VARIABLE_OP {CMD}.range_max multiply ${CMD}.unit.$spell.max_range_multiply_by|}
                [/then]
            [/if]
# #ifdef MODRPG_DEBUG_USE_CAST
#             [message]
#                 speaker=narrator
#                 side_for=$side_number
#                 message=_ "${CMD}.unit.name (${CMD}.unit.x,${CMD}.unit.y) --> ${CMD}.target.type (${CMD}.target.x,${CMD}.target.y) dist=$distance
# item_id=$i, array={CMD}.unit.{ARRAY_PATH}, ${CMD}.unit.{ARRAY_PATH}.length
# spell=($spell.command, $spell.target, $spell.range_min, ${CMD}.range_max)
# ${CMD}.unit.{ARRAY_PATH}[$i].command, ${CMD}.unit.{ARRAY_PATH}[$i].target, ${CMD}.unit.{ARRAY_PATH}[$i].range_min, ${CMD}.unit.{ARRAY_PATH}[$i].range_max/${CMD}.range_max"
#             [/message]
# #endif

            [if] #numerical_equals=1
                [variable]
                    name={CMD}.target.type
                    equals=$spell.target
                [/variable]
                [variable]
                    name=distance
                    greater_than_equal_to=$spell.range_min
                [/variable]
                [variable]
                    name=distance
                    less_than_equal_to=${CMD}.range_max
                [/variable]
                [then]
                    {IF_VAR spell.infinite numerical_equals 1 (
                        [then]
                            {VARIABLE uses_left "-"}
                        [/then]
                        [else]
                            {VARIABLE uses_left $spell.uses}
                        [/else]
                    )}
                    # need uses left gauge
                    {CLEAR_VARIABLE mana}
                    {IF_VAR spell.category equals usables (
                        [then]
                            {VARIABLE mana_cost ""}
                        [/then]
                        [else]
                            {VARIABLE mana_cost ", $spell.mana_cost| mana"}
                        [/else]
                    )}
                    # [message]
                    #     speaker=narrator
                    #     message=_ "{CMD}.useables ${CMD}.unit.name, ${CMD}.target.type|, $distance| $spell.command|, $spell.target| ($spell.range_min|-${CMD}.max_range|)"
                    # [/message]

                    [set_variables]
                        name={CMD}.useables
                        mode=append
                        [value]
                            image=$spell.icon|.png
                            label=_ "$spell.description
<small>Uses: $spell.action_use|$mana_cost|</small>"
                            description=_"$uses_left"
                            [command]
                                [set_variables]
                                    name=act
                                    mode=replace
                                    [value]
                                        item_id=$i
                                        item_path={ARRAY_PATH}[$i]
                                        actor_id=${CMD}.unit.id
                                        [target]
                                            x=${CMD}.target.x
                                            y=${CMD}.target.y
                                            type=${CMD}.target.type
                                        [/target]
                                    [/value]
                                [/set_variables]

                                {VARIABLE target_x ${CMD}.target.x}
                                {VARIABLE target_y ${CMD}.target.y}
                                {VARIABLE acting_x ${CMD}.unit.x}
                                {VARIABLE acting_y ${CMD}.unit.y}
                                {VARIABLE item_id $i}
                                {CONFIRM_ACTION {CMD}.unit}
                                [store_unit]
                                    variable=current_unit
                                    [filter]
                                        id=${CMD}.unit.id
                                    [/filter]
                                [/store_unit]
                                [fire_event]
                                    name=$spell.command
                                [/fire_event]
                                {IF_VAR ${CMD}.unit.variables.complete_action numerical_equals 1 (
                                    [then]
                                        [unstore_unit]
                                            variable=current_unit
                                        [/unstore_unit]
                                    [/then]
                                )}
                                {CLEAR_VARIABLE current_unit}
                                {CLEAR_VARIABLE acting_y}
                                {CLEAR_VARIABLE acting_x}
                                {CLEAR_VARIABLE target_y}
                                {CLEAR_VARIABLE target_x}
                                {CLEAR_VARIABLE item_id}
                                {CLEAR_VARIABLE act}
                                {VARIABLE {NOT_DONE} 0}
                            [/command]
                        [/value]
                    [/set_variables]
                [/then]
            [/if]
        [/do]
    [/foreach]
#enddef

# Add an [option]-compatible object to represent the specified UNIT for a list
# of spells and usable objectsd
#define MODRPG_ADD_UNIT_INFO UNIT DEST
#ifdef MODRPG_DEBUG_USE_CAST
    # [message]
    #     speaker=narrator
    #     message=_ "cmd.useables.length=$cmd.useables.length|, unit=${UNIT}.name|"
    # [/message]
#endif
    [if]
        [variable]
            name={UNIT}.variables.blocked_attacks
            numerical_equals=1
        [/variable]
        [or]
            [variable]
                name={UNIT}.attacks_left
                numerical_equals=0
            [/variable]
        [/or]
        [then]
            {VARIABLE actions_temp.attacks ("0 attacks, ")}
        [/then]
        [else]
            {VARIABLE actions_temp.attacks ("1 attack, ")}
        [/else]
    [/if]
    {VARIABLE actions_temp.simple ("${UNIT}.variables.simple_action| simple, ")}

    # FIXME: This one is always showing zero
    [if]
        [variable]
            name={UNIT}.variables.casting_actions
            numerical_equals=1
        [/variable]
        [then]
            {VARIABLE actions_temp.casting ("1 casting time.")}
        [/then]
        [else]
            {VARIABLE actions_temp.casting ("${UNIT}.variables.casting_actions| casting time.")}
        [/else]
    [/if]
    [set_variables]
        name={DEST}
        mode=append
        [value]
            image=${UNIT}.image|~TC(${UNIT}.side,magenta)
            label=_ "${UNIT}.name
<small>Available actions: $actions_temp.attacks|$actions_temp.simple|$actions_temp.casting|</small>"
#<small>Available actions: "+$actions_temp.attacks|+$actions_temp.simple|+$actions_temp.casting|
            description=_ ""
        [/value]
    [/set_variables]
    {CLEAR_VARIABLE actions_temp}
#enddef

# MODRPG_COMMAND_USE - Singular menu for using items, casting spells
#
# cmd shall hold all values related to the action
#   .target.x,y     target coordinates
#   .target.type    what is at the target coordinates: friend, foe, or empty
#   .units          array of (stored) units who can act
#   .unit           the current (stored) unit who can act
#   .useables       temporary for building list of per-unit useables
#   .menu           the resulting list of menu items, including unit portraits
#
# cmd.units and cmd.unit will be cleared by the time the item is selected and
# the command executed. Therefore, each command will init and unstore (if
# action completed) current_user variable.
#define MODRPG_COMMAND_USE
    [set_menu_item]
        id=use_spell_item
        image=commands/cast.png
        description=_ "Use/Cast"
        [command]
            {CLEAR_VARIABLE unit}
            {CLEAR_VARIABLE cmd}
            {CLEAR_VARIABLE act}
            # [message]
            #     speaker=narrator
            #     message=_ "side_number=$side_number x,y=$x1|,$y1, unit=$unit.id, $unit.name"
            # [/message]

            # We're going to put everything related to this in a cmd table.
            [set_variables]
                name=cmd
                mode=replace
                [value]
                    [target]
                        x=$x1
                        y=$y1
                        type=
                    [/target]
                [/value]
            [/set_variables]

            # Determine target type: empty, friend, or foe
            [if]
                [not]
                    [have_unit]
                        x,y=$x1,$y1
                    [/have_unit]
                [/not]
                [then]
                    {VARIABLE cmd.target.type empty}
                [/then]
                [elseif]
                    [have_unit]
                        x,y=$x1,$y1
                        [filter_side]
                            [allied_with]
                                side=$side_number
                            [/allied_with]
                        [/filter_side]
                    [/have_unit]
                    [then]
                        {VARIABLE cmd.target.type friend}
                    [/then]
                [/elseif]
                [elseif]
                    [have_unit]
                        x,y=$x1,$y1
                        [filter_side]
                            [enemy_of]
                                side=$side_number
                            [/enemy_of]
                        [/filter_side]
                    [/have_unit]
                    [then]
                        {VARIABLE cmd.target.type foe}
                    [/then]
                [/elseif]
                [else]
                    [then]
                        {VARIABLE cmd.target.type unknown}
                        [wml_message]
                            message=_ "Unknown target at $x1,$y1"
                            logger=warn
                        [/wml_message]
                    [/then]
                [/else]
            [/if]

            # These are our "heros"
            [store_unit]
                variable=cmd.units
                [filter]
                    side=$side_number
                    canrecruit=yes
                [/filter]
            [/store_unit]
            {VARIABLE target_x $x1|}
            {VARIABLE target_y $y1|}
            # [message]
            #     speaker=narrator
            #     message=_ "side_number=$side_number x,y=$x1|,$y1, target.type=$cmd.target.type"
            # [/message]

            # Stupid variable name
            {VARIABLE upgrading 1}
            [while]
                [variable]
                    name=upgrading
                    numerical_equals=1
                [/variable]
                [do]
                    {CLEAR_VARIABLE cmd.menu}
                    [foreach]
                        array=cmd.units
                        variable=cmd.unit
                        readonly=yes
                        [do]
                            {CLEAR_VARIABLE cmd.useables}
                            {VARIABLE acting_x $cmd.unit.x|}
                            {VARIABLE acting_y $cmd.unit.y|}

                            {MODRPG_FIND_USEABLES cmd variables.inventory.spells upgrading}
                            {MODRPG_FIND_USEABLES cmd variables.inventory.usables upgrading}

#ifdef MODRPG_DEBUG_USE_CAST
                            # [message]
                            #     speaker=narrator
                            #     message=_ "$cmd.unit.name has $cmd.useables.length| matches for $cmd.target.type at $x1|,$y1"
                            # [/message]
#endif
                            [if]
                                [variable]
                                    name=cmd.useables.length
                                    greater_than=0
                                [/variable]
                                [then]
                                    {MODRPG_ADD_UNIT_INFO cmd.unit cmd.menu}
                                    [set_variables]
                                        name=cmd.menu
                                        mode=append
                                        to_variable=cmd.useables
                                    [/set_variables]
                                [/then]
                            [/if]
                        [/do]
                    # Unit
                    # [dump_variable]
                    #     name=cmd.menu
                    # [/dump_variable]
                    # [dump_variable]
                    #     name=cmd.unit
                    # [/dump_variable]
                    [/foreach]
                    {CLEAR_VARIABLE cmd.unit}
                    {CLEAR_VARIABLE cmd.units}
                    [if]
                        [variable]
                            name=cmd.menu.length
                            less_than=1
                        [/variable]
                        [then]
                            [message]
                                speaker=narrator
                                side_for=$side_number
                                message=_ "You have nothing to use here."
                                image=wesnoth-icon.png
                            [/message]
                            {VARIABLE upgrading 0}
                        [/then]
                        [else]
                            [message]
                                speaker=narrator
                                side_for=$side_number
                                message= _ "Use which?
<small>Note: Right-click on other units and hexes to use or cast on them.</small>"
                                [option]
                                    image=check.png
                                    label=_ "(End)"
                                    description=_ "uses left"
                                    [command]
#                                         {VARIABLE unit_path current_unit}
#                                         [construct_unit]
#                                             variable=$unit_path
#                                         [/construct_unit]

                                        {VARIABLE_OP upgrading sub 1}
                                    [/command]
                                [/option]
                                [insert_tag]
                                    name=option
                                    variable=cmd.menu
                                [/insert_tag]
                                image=wesnoth-icon.png
                            [/message]
                        [/else]
                    [/if]
                [/do]
            [/while]
            {CLEAR_VARIABLE cmd}
            {CLEAR_VARIABLE unit_path}
            {CLEAR_VARIABLE current_unit}
        [/command]
    [/set_menu_item]
    [event]
        name=scenario_end
        [clear_menu_item]
            id=use_spell_item
        [/clear_menu_item]
    [/event]
#enddef

#define MODRPG_COMMAND_HENCH_RELEASE
    [set_menu_item]
        id=y_release_hench
        image=commands/button_x.png
        description=_ "Release Henchman"
        [filter_location]
            x,y=$x1,$y1
            [filter]
                side=$side_number
                [not]
                    canrecruit=yes
                [/not]
                [not]
                    [filter_wml]
                        [variables]
                            is_summon=1
                        [/variables]
                    [/filter_wml]
                [/not]
            [/filter]
        [/filter_location]
        [command]
            [message]
                message=_ "Do you really want to release this unit?"
                x,y=$x1,$y1
                [option]
                    label=_ "No."
                    [command]
                    [/command]
                [/option]
                [option]
                    label=_ "Yes."
                    [command]
                        [message]
                            side=$side_number
                            canrecruit=yes
                            side_for=$side_number
                            message=_ "You are dismissed."
                        [/message]
                        [kill]
                            x,y=$x1,$y1
                            animate=yes
                        [/kill]
                    [/command]
                [/option]
            [/message]
        [/command]
    [/set_menu_item]
    [event]
        name=scenario_end
        [clear_menu_item]
            id=y_release_hench
        [/clear_menu_item]
    [/event]
#enddef
